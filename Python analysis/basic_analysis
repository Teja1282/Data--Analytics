{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 59,
      "metadata": {
        "id": "_JFcEX-nPgKs"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import io\n",
        "from scipy.stats import chi2_contingency\n",
        "import numpy as np\n",
        "import plotly.express as px\n",
        "\n",
        "class BasicAnalysis:\n",
        "    def __init__(self, df=None, filename=None, use_colab_upload=False):\n",
        "        if filename:\n",
        "            self.df = pd.read_csv(filename)\n",
        "        elif use_colab_upload:\n",
        "            from google.colab import files\n",
        "            uploaded = files.upload()\n",
        "            uploaded_filename = next(iter(uploaded))\n",
        "            self.df = pd.read_csv(uploaded_filename)\n",
        "        elif df is not None:\n",
        "            self.df = df\n",
        "        else:\n",
        "            raise ValueError(\"Provide a DataFrame, a filename, or set use_colab_upload=True to upload a file.\")\n",
        "\n",
        "    def shape(self):\n",
        "        return self.df.shape\n",
        "\n",
        "    def head(self, n=5):\n",
        "        return self.df.head(n)\n",
        "\n",
        "    def tail(self, n=5):\n",
        "        return self.df.tail(n)\n",
        "\n",
        "    def information(self):\n",
        "        return self.df.info()\n",
        "\n",
        "    def data_types(self):\n",
        "        return self.df.dtypes\n",
        "\n",
        "    def statistics(self):\n",
        "        return self.df.describe()\n",
        "\n",
        "    def find_columns(self):\n",
        "        return self.df.columns.tolist()\n",
        "\n",
        "    def find_null(self):\n",
        "        return self.df.isnull().sum()\n",
        "\n",
        "    def null_percentage(self):\n",
        "        return (self.df.isnull().mean() * 100).round(2).sort_values(ascending=False)\n",
        "\n",
        "\n",
        "    def null_heatmap(self):\n",
        "        plt.figure(figsize=(10,6))\n",
        "        sns.heatmap(self.df.isnull(), cbar=False, cmap='viridis')\n",
        "        plt.title(\"Missing Values Heatmap\")\n",
        "        plt.show()\n",
        "\n",
        "    def find_duplicated(self):\n",
        "        return self.df.duplicated().sum()\n",
        "\n",
        "    def drop_duplicates(self):\n",
        "        self.df.drop_duplicates(inplace=True)\n",
        "\n",
        "    def drop_nulls(self):\n",
        "        self.df.dropna(inplace=True)\n",
        "\n",
        "    def unique_counts(self):\n",
        "        return self.df.nunique()\n",
        "\n",
        "    def replace_values(self, column_name, old, new):\n",
        "        if column_name not in self.df.columns:\n",
        "            raise ValueError(f\"{column_name} not in DataFrame\")\n",
        "        self.df[column_name].replace({old: new}, inplace=True)\n",
        "\n",
        "    def unique_values(self, column_name):\n",
        "        if column_name not in self.df.columns:\n",
        "            raise ValueError(f\"{column_name} not in DataFrame\")\n",
        "        return self.df[column_name].unique()\n",
        "\n",
        "    def value_counts(self, column_name):\n",
        "        if column_name not in self.df.columns:\n",
        "            raise ValueError(f\"{column_name} not in DataFrame\")\n",
        "        return self.df[column_name].value_counts()\n",
        "\n",
        "    def fill_missing(self, col_name):\n",
        "        self.df[col_name] = self.df[col_name].replace(\"\", pd.NA)\n",
        "\n",
        "        if self.df[col_name].dtype in ['int64', 'float64']:\n",
        "            fill_value = self.df[col_name].mean()\n",
        "        else:\n",
        "            fill_value = self.df[col_name].mode().iloc[0]\n",
        "\n",
        "        self.df[col_name] = self.df[col_name].fillna(fill_value)\n",
        "        return self.df[col_name]\n",
        "\n",
        "\n",
        "    def correlation_matrix(self):\n",
        "        return self.df.corr(numeric_only=True)\n",
        "\n",
        "    def categorical_summary(self):\n",
        "        summary = {}\n",
        "        cat_cols = self.df.select_dtypes(include='object').columns\n",
        "        for col in cat_cols:\n",
        "            summary[col] = self.df[col].value_counts()\n",
        "        return summary\n",
        "\n",
        "    def detect_outlier(self, column_name):\n",
        "        if column_name not in self.df.columns:\n",
        "            raise ValueError(f\"{column_name} not found in DataFrame.\")\n",
        "\n",
        "        col = pd.to_numeric(self.df[column_name], errors='coerce').dropna()\n",
        "        Q1 = col.quantile(0.25)\n",
        "        Q3 = col.quantile(0.75)\n",
        "        IQR = Q3 - Q1\n",
        "        lower_bound = Q1 - 1.5 * IQR\n",
        "        upper_bound = Q3 + 1.5 * IQR\n",
        "        mean_val = col.mean()\n",
        "\n",
        "        print(f\"Lower Bound: {lower_bound} and Upper Bound: {upper_bound} and Mean: {mean_val}\")\n",
        "\n",
        "        outliers = self.df[(self.df[column_name] < lower_bound) |\n",
        "                       (self.df[column_name] > upper_bound)]\n",
        "        return outliers[column_name].tolist()\n",
        "\n",
        "\n",
        "    def plot_column_distribution(self, column_name):\n",
        "        if column_name not in self.df.columns:\n",
        "            raise ValueError(f\"{column_name} not in DataFrame\")\n",
        "        plt.figure(figsize=(8,4))\n",
        "        sns.histplot(self.df[column_name].dropna(), kde=False)\n",
        "        plt.title(f'Distribution of {column_name}')\n",
        "        plt.show()\n",
        "\n",
        "    def correlation_between(self, col1, col2):\n",
        "        if col1 not in self.df.columns or col2 not in self.df.columns:\n",
        "            raise ValueError(\"One or both columns not found in DataFrame.\")\n",
        "\n",
        "        if self.df[col1].dtype != 'object' or self.df[col2].dtype != 'object':\n",
        "            raise TypeError(\"must be categorical(object type).\")\n",
        "\n",
        "        confusion_matrix = pd.crosstab(self.df[col1], self.df[col2])\n",
        "        chi2 = chi2_contingency(confusion_matrix)\n",
        "\n",
        "        return confusion_matrix, chi2[1]\n",
        "    def column_types(self):\n",
        "        categorical = self.df.select_dtypes(include='object').columns.tolist()\n",
        "        numerical = self.df.select_dtypes(include=['int64', 'float64']).columns.tolist()\n",
        "        return {'categorical': categorical, 'numerical': numerical}\n",
        "\n",
        "    def count_plots(self, column_name):\n",
        "\n",
        "        if column_name not in self.df.columns:\n",
        "            raise ValueError(f\"'{column_name}' not found in DataFrame.\")\n",
        "\n",
        "        if self.df[column_name].dtype != 'object':\n",
        "            raise TypeError(f\"'{column_name}' is not a categorical (object) column.\")\n",
        "\n",
        "        plt.figure(figsize=(8, 4))\n",
        "        sns.countplot(x=column_name, data=self.df, palette=\"Set2\")\n",
        "        plt.title(f'Count Plot for {column_name}')\n",
        "        plt.xticks(rotation=45)\n",
        "        plt.tight_layout()\n",
        "        plt.show()\n",
        "\n",
        "    def boxplots(self,name):\n",
        "        plt.figure(figsize=(6, 4))\n",
        "        sns.boxplot(y=self.df[name], color='skyblue')\n",
        "        plt.title(f'Boxplot of {name}')\n",
        "        plt.ylabel(name)\n",
        "        plt.tight_layout()\n",
        "        plt.show()\n",
        "    def scatter_plot(self, x_col, y_col):\n",
        "\n",
        "        plt.figure(figsize=(7, 5))\n",
        "        sns.scatterplot(x=self.df[x_col], y=self.df[y_col], color='teal')\n",
        "        plt.title(f'Scatter Plot of {x_col} vs {y_col}')\n",
        "        plt.xlabel(x_col)\n",
        "        plt.ylabel(y_col)\n",
        "        plt.tight_layout()\n",
        "        plt.show()\n",
        "    def stacked_bar(self, x_col, y_col):\n",
        "        pd.crosstab(self.df[x_col], self.df[y_col], normalize='index') \\\n",
        "          .plot(kind='bar', stacked=True, colormap='viridis', figsize=(8, 5))\n",
        "\n",
        "        plt.title(f'{x_col} vs {y_col}')\n",
        "        plt.xlabel(x_col)\n",
        "        plt.ylabel('Proportion')\n",
        "        plt.legend(title=y_col, bbox_to_anchor=(1.05, 1), loc='upper left')\n",
        "        plt.tight_layout()\n",
        "        plt.show()\n",
        "\n",
        "    def pie_chart(self, column):\n",
        "        self.df[column].value_counts(normalize=True).plot(kind='pie',autopct='%1.1f%%',startangle=90,colormap='Set3',figsize=(6, 6),wedgeprops={'edgecolor': 'black'})\n",
        "        plt.ylabel('')\n",
        "        plt.title(f'Pie Chart of {column}')\n",
        "        plt.tight_layout()\n",
        "        plt.show()\n",
        "\n",
        "    def bar_plot(self, category_col, value_col):\n",
        "        plt.figure(figsize=(10, 6))\n",
        "        sns.barplot(x=category_col, y=value_col, data=self.df, palette='viridis')\n",
        "\n",
        "    def _3d_scatter(self, x_col, y_col, z_col):\n",
        "        fig = px.scatter_3d(self.df, x=x_col, y=y_col, z=z_col,color=z_col,color_continuous_scale='Viridis',labels={'x': x_col, 'y': y_col, 'z':z_col})\n",
        "        fig.update_layout(scene=dict(xaxis_title=x_col, yaxis_title=y_col, zaxis_title=z_col))\n",
        "        fig.show()\n",
        "    def _3d_bar(self, x_col, y_col):\n",
        "        fig = px.bar(self.df, x=x_col, y=y_col,labels={'x': x_col, 'y': y_col})\n",
        "        fig.update_layout(scene=dict(xaxis_title=x_col, yaxis_title=y_col))\n",
        "        fig.show()\n",
        "\n",
        "    def _3d_box(self,xcol):\n",
        "        fig = px.box(self.df, y=xcol)\n",
        "        fig.show()\n",
        "\n",
        "    def surface_plot(self, x_col, y_col, z_col):\n",
        "        fig = px.scatter_3d(self.df, x=x_col, y=y_col, z=z_col, color=z_col, color_continuous_scale='Viridis',labels={'x': x_col, 'y': y_col, 'z': z_col})\n",
        "        fig.update_layout(scene=dict(xaxis_title=x_col, yaxis_title=y_col, zaxis_title=z_col))\n",
        "        fig.show()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=BasicAnalysis(use_colab_upload=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "zSrOhTDvOo9Y",
        "outputId": "a077d91b-d91f-4a99-d4c0-fa4407eea1e0"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-aaeeef08-83a3-41da-bb1f-0d0602643755\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-aaeeef08-83a3-41da-bb1f-0d0602643755\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving insurance_claims.csv to insurance_claims (9).csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a.shape()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NpwCwTkjPo44",
        "outputId": "5a263524-5163-44e3-8f61-2b30727ef799"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1000, 39)"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "id": "RE-ByFkSelmk",
        "outputId": "32d706fc-c748-4354-fd01-22c337735084"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   months_as_customer  age  policy_number policy_bind_date policy_state  \\\n",
              "0                 328   48         521585       17-10-2014           OH   \n",
              "1                 228   42         342868       27-06-2006           IN   \n",
              "2                 134   29         687698       06-09-2000           OH   \n",
              "3                 256   41         227811       25-05-1990           IL   \n",
              "4                 228   44         367455       06-06-2014           IL   \n",
              "\n",
              "  policy_csl  policy_deductable  policy_annual_premium  umbrella_limit  \\\n",
              "0    250/500               1000                1406.91               0   \n",
              "1    250/500               2000                1197.22         5000000   \n",
              "2    100/300               2000                1413.14         5000000   \n",
              "3    250/500               2000                1415.74         6000000   \n",
              "4   500/1000               1000                1583.91         6000000   \n",
              "\n",
              "   insured_zip  ... witnesses police_report_available total_claim_amount  \\\n",
              "0       466132  ...         2                     YES              71610   \n",
              "1       468176  ...         0                       ?               5070   \n",
              "2       430632  ...         3                      NO              34650   \n",
              "3       608117  ...         2                      NO              63400   \n",
              "4       610706  ...         1                      NO               6500   \n",
              "\n",
              "  injury_claim property_claim  vehicle_claim  auto_make auto_model auto_year  \\\n",
              "0         6510          13020          52080       Saab        92x      2004   \n",
              "1          780            780           3510   Mercedes       E400      2007   \n",
              "2         7700           3850          23100      Dodge        RAM      2007   \n",
              "3         6340           6340          50720  Chevrolet      Tahoe      2014   \n",
              "4         1300            650           4550     Accura        RSX      2009   \n",
              "\n",
              "  fraud_reported  \n",
              "0              Y  \n",
              "1              Y  \n",
              "2              N  \n",
              "3              Y  \n",
              "4              N  \n",
              "\n",
              "[5 rows x 39 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-15b67ae9-db2b-49be-ba58-ff74668d549e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>months_as_customer</th>\n",
              "      <th>age</th>\n",
              "      <th>policy_number</th>\n",
              "      <th>policy_bind_date</th>\n",
              "      <th>policy_state</th>\n",
              "      <th>policy_csl</th>\n",
              "      <th>policy_deductable</th>\n",
              "      <th>policy_annual_premium</th>\n",
              "      <th>umbrella_limit</th>\n",
              "      <th>insured_zip</th>\n",
              "      <th>...</th>\n",
              "      <th>witnesses</th>\n",
              "      <th>police_report_available</th>\n",
              "      <th>total_claim_amount</th>\n",
              "      <th>injury_claim</th>\n",
              "      <th>property_claim</th>\n",
              "      <th>vehicle_claim</th>\n",
              "      <th>auto_make</th>\n",
              "      <th>auto_model</th>\n",
              "      <th>auto_year</th>\n",
              "      <th>fraud_reported</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>328</td>\n",
              "      <td>48</td>\n",
              "      <td>521585</td>\n",
              "      <td>17-10-2014</td>\n",
              "      <td>OH</td>\n",
              "      <td>250/500</td>\n",
              "      <td>1000</td>\n",
              "      <td>1406.91</td>\n",
              "      <td>0</td>\n",
              "      <td>466132</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>YES</td>\n",
              "      <td>71610</td>\n",
              "      <td>6510</td>\n",
              "      <td>13020</td>\n",
              "      <td>52080</td>\n",
              "      <td>Saab</td>\n",
              "      <td>92x</td>\n",
              "      <td>2004</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>228</td>\n",
              "      <td>42</td>\n",
              "      <td>342868</td>\n",
              "      <td>27-06-2006</td>\n",
              "      <td>IN</td>\n",
              "      <td>250/500</td>\n",
              "      <td>2000</td>\n",
              "      <td>1197.22</td>\n",
              "      <td>5000000</td>\n",
              "      <td>468176</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>?</td>\n",
              "      <td>5070</td>\n",
              "      <td>780</td>\n",
              "      <td>780</td>\n",
              "      <td>3510</td>\n",
              "      <td>Mercedes</td>\n",
              "      <td>E400</td>\n",
              "      <td>2007</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>134</td>\n",
              "      <td>29</td>\n",
              "      <td>687698</td>\n",
              "      <td>06-09-2000</td>\n",
              "      <td>OH</td>\n",
              "      <td>100/300</td>\n",
              "      <td>2000</td>\n",
              "      <td>1413.14</td>\n",
              "      <td>5000000</td>\n",
              "      <td>430632</td>\n",
              "      <td>...</td>\n",
              "      <td>3</td>\n",
              "      <td>NO</td>\n",
              "      <td>34650</td>\n",
              "      <td>7700</td>\n",
              "      <td>3850</td>\n",
              "      <td>23100</td>\n",
              "      <td>Dodge</td>\n",
              "      <td>RAM</td>\n",
              "      <td>2007</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>256</td>\n",
              "      <td>41</td>\n",
              "      <td>227811</td>\n",
              "      <td>25-05-1990</td>\n",
              "      <td>IL</td>\n",
              "      <td>250/500</td>\n",
              "      <td>2000</td>\n",
              "      <td>1415.74</td>\n",
              "      <td>6000000</td>\n",
              "      <td>608117</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>NO</td>\n",
              "      <td>63400</td>\n",
              "      <td>6340</td>\n",
              "      <td>6340</td>\n",
              "      <td>50720</td>\n",
              "      <td>Chevrolet</td>\n",
              "      <td>Tahoe</td>\n",
              "      <td>2014</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>228</td>\n",
              "      <td>44</td>\n",
              "      <td>367455</td>\n",
              "      <td>06-06-2014</td>\n",
              "      <td>IL</td>\n",
              "      <td>500/1000</td>\n",
              "      <td>1000</td>\n",
              "      <td>1583.91</td>\n",
              "      <td>6000000</td>\n",
              "      <td>610706</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>NO</td>\n",
              "      <td>6500</td>\n",
              "      <td>1300</td>\n",
              "      <td>650</td>\n",
              "      <td>4550</td>\n",
              "      <td>Accura</td>\n",
              "      <td>RSX</td>\n",
              "      <td>2009</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 39 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-15b67ae9-db2b-49be-ba58-ff74668d549e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-15b67ae9-db2b-49be-ba58-ff74668d549e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-15b67ae9-db2b-49be-ba58-ff74668d549e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-ff8a4495-e1db-445c-a148-8c526da10a72\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ff8a4495-e1db-445c-a148-8c526da10a72')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-ff8a4495-e1db-445c-a148-8c526da10a72 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "id": "9-Ilj_64eos-",
        "outputId": "98232144-905c-4b30-a6f1-82194b09fa2a"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     months_as_customer  age  policy_number policy_bind_date policy_state  \\\n",
              "995                   3   38         941851       16-07-1991           OH   \n",
              "996                 285   41         186934       05-01-2014           IL   \n",
              "997                 130   34         918516       17-02-2003           OH   \n",
              "998                 458   62         533940       18-11-2011           IL   \n",
              "999                 456   60         556080       11-11-1996           OH   \n",
              "\n",
              "    policy_csl  policy_deductable  policy_annual_premium  umbrella_limit  \\\n",
              "995   500/1000               1000                1310.80               0   \n",
              "996    100/300               1000                1436.79               0   \n",
              "997    250/500                500                1383.49         3000000   \n",
              "998   500/1000               2000                1356.92         5000000   \n",
              "999    250/500               1000                 766.19               0   \n",
              "\n",
              "     insured_zip  ... witnesses police_report_available total_claim_amount  \\\n",
              "995       431289  ...         1                       ?              87200   \n",
              "996       608177  ...         3                       ?             108480   \n",
              "997       442797  ...         3                     YES              67500   \n",
              "998       441714  ...         1                     YES              46980   \n",
              "999       612260  ...         3                       ?               5060   \n",
              "\n",
              "    injury_claim property_claim  vehicle_claim   auto_make auto_model  \\\n",
              "995        17440           8720          61040       Honda     Accord   \n",
              "996        18080          18080          72320  Volkswagen     Passat   \n",
              "997         7500           7500          52500      Suburu    Impreza   \n",
              "998         5220           5220          36540        Audi         A5   \n",
              "999          460            920           3680    Mercedes       E400   \n",
              "\n",
              "    auto_year fraud_reported  \n",
              "995      2006              N  \n",
              "996      2015              N  \n",
              "997      1996              N  \n",
              "998      1998              N  \n",
              "999      2007              N  \n",
              "\n",
              "[5 rows x 39 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1668eaa1-0758-4122-a5d8-37a6fbff9940\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>months_as_customer</th>\n",
              "      <th>age</th>\n",
              "      <th>policy_number</th>\n",
              "      <th>policy_bind_date</th>\n",
              "      <th>policy_state</th>\n",
              "      <th>policy_csl</th>\n",
              "      <th>policy_deductable</th>\n",
              "      <th>policy_annual_premium</th>\n",
              "      <th>umbrella_limit</th>\n",
              "      <th>insured_zip</th>\n",
              "      <th>...</th>\n",
              "      <th>witnesses</th>\n",
              "      <th>police_report_available</th>\n",
              "      <th>total_claim_amount</th>\n",
              "      <th>injury_claim</th>\n",
              "      <th>property_claim</th>\n",
              "      <th>vehicle_claim</th>\n",
              "      <th>auto_make</th>\n",
              "      <th>auto_model</th>\n",
              "      <th>auto_year</th>\n",
              "      <th>fraud_reported</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>3</td>\n",
              "      <td>38</td>\n",
              "      <td>941851</td>\n",
              "      <td>16-07-1991</td>\n",
              "      <td>OH</td>\n",
              "      <td>500/1000</td>\n",
              "      <td>1000</td>\n",
              "      <td>1310.80</td>\n",
              "      <td>0</td>\n",
              "      <td>431289</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>?</td>\n",
              "      <td>87200</td>\n",
              "      <td>17440</td>\n",
              "      <td>8720</td>\n",
              "      <td>61040</td>\n",
              "      <td>Honda</td>\n",
              "      <td>Accord</td>\n",
              "      <td>2006</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>285</td>\n",
              "      <td>41</td>\n",
              "      <td>186934</td>\n",
              "      <td>05-01-2014</td>\n",
              "      <td>IL</td>\n",
              "      <td>100/300</td>\n",
              "      <td>1000</td>\n",
              "      <td>1436.79</td>\n",
              "      <td>0</td>\n",
              "      <td>608177</td>\n",
              "      <td>...</td>\n",
              "      <td>3</td>\n",
              "      <td>?</td>\n",
              "      <td>108480</td>\n",
              "      <td>18080</td>\n",
              "      <td>18080</td>\n",
              "      <td>72320</td>\n",
              "      <td>Volkswagen</td>\n",
              "      <td>Passat</td>\n",
              "      <td>2015</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>997</th>\n",
              "      <td>130</td>\n",
              "      <td>34</td>\n",
              "      <td>918516</td>\n",
              "      <td>17-02-2003</td>\n",
              "      <td>OH</td>\n",
              "      <td>250/500</td>\n",
              "      <td>500</td>\n",
              "      <td>1383.49</td>\n",
              "      <td>3000000</td>\n",
              "      <td>442797</td>\n",
              "      <td>...</td>\n",
              "      <td>3</td>\n",
              "      <td>YES</td>\n",
              "      <td>67500</td>\n",
              "      <td>7500</td>\n",
              "      <td>7500</td>\n",
              "      <td>52500</td>\n",
              "      <td>Suburu</td>\n",
              "      <td>Impreza</td>\n",
              "      <td>1996</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>998</th>\n",
              "      <td>458</td>\n",
              "      <td>62</td>\n",
              "      <td>533940</td>\n",
              "      <td>18-11-2011</td>\n",
              "      <td>IL</td>\n",
              "      <td>500/1000</td>\n",
              "      <td>2000</td>\n",
              "      <td>1356.92</td>\n",
              "      <td>5000000</td>\n",
              "      <td>441714</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>YES</td>\n",
              "      <td>46980</td>\n",
              "      <td>5220</td>\n",
              "      <td>5220</td>\n",
              "      <td>36540</td>\n",
              "      <td>Audi</td>\n",
              "      <td>A5</td>\n",
              "      <td>1998</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>456</td>\n",
              "      <td>60</td>\n",
              "      <td>556080</td>\n",
              "      <td>11-11-1996</td>\n",
              "      <td>OH</td>\n",
              "      <td>250/500</td>\n",
              "      <td>1000</td>\n",
              "      <td>766.19</td>\n",
              "      <td>0</td>\n",
              "      <td>612260</td>\n",
              "      <td>...</td>\n",
              "      <td>3</td>\n",
              "      <td>?</td>\n",
              "      <td>5060</td>\n",
              "      <td>460</td>\n",
              "      <td>920</td>\n",
              "      <td>3680</td>\n",
              "      <td>Mercedes</td>\n",
              "      <td>E400</td>\n",
              "      <td>2007</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 39 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1668eaa1-0758-4122-a5d8-37a6fbff9940')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1668eaa1-0758-4122-a5d8-37a6fbff9940 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1668eaa1-0758-4122-a5d8-37a6fbff9940');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-e715cc83-7b46-4422-9c54-17ef0bc37ccb\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e715cc83-7b46-4422-9c54-17ef0bc37ccb')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-e715cc83-7b46-4422-9c54-17ef0bc37ccb button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a.surface_plot(\"age\",\"incident_state\",\"total_claim_amount\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "BBD2U_4zMpjR",
        "outputId": "ad3c8338-8ce8-494c-c2c5-a136a7333d6b"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"d1dd5509-d078-4513-9892-759065bc342f\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"d1dd5509-d078-4513-9892-759065bc342f\")) {                    Plotly.newPlot(                        \"d1dd5509-d078-4513-9892-759065bc342f\",                        [{\"hovertemplate\":\"age=%{x}\\u003cbr\\u003eincident_state=%{y}\\u003cbr\\u003etotal_claim_amount=%{marker.color}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":[71610,5070,34650,63400,6500,64100,78650,51590,27700,42300,87010,114920,56520,7280,46200,63120,52110,77880,72930,60400,47160,37840,71520,98160,77880,71500,9020,5720,69840,91650,75600,67140,29790,77110,64800,53100,60200,5330,62300,60170,40000,97080,51660,51120,56400,55120,77110,62800,7290,76600,81800,7260,4300,70510,2640,78900,56430,2400,65790,62920,69480,44280,56300,68520,59130,82320,89700,33930,68530,4300,68310,61290,30100,57120,42930,51210,89400,59730,8060,72200,50800,6600,7500,6490,60940,58300,68400,64240,4700,45120,66950,98340,5900,70680,93720,6930,72930,64890,5400,5600,79300,52800,28800,2970,93480,4320,79800,74200,70590,60940,74700,70000,81070,57720,7080,47700,51260,70400,90000,72820,69300,76560,55440,77130,42000,36300,40320,3960,63840,44730,84720,61500,51000,46800,78120,69200,3690,65500,76120,73560,52030,5170,8190,70800,45630,99320,64000,47300,71680,112320,82720,48060,63570,63240,54240,37280,72100,6500,78240,6200,6160,76050,86060,107900,99990,61380,71280,64000,5940,6700,51740,53600,44910,48100,6100,79600,77040,62590,85150,4950,51100,100800,90970,81840,54900,88660,18000,5500,73920,101860,5390,50490,55500,7040,40160,55680,5300,5200,59400,2520,5760,76700,5920,64350,19080,54400,59800,72000,65070,8800,6120,7080,34320,53460,81360,81070,63120,7200,70290,60190,61380,28100,49060,57060,77880,73500,88920,47630,59040,79530,53680,33550,69100,79750,53600,76560,41130,78650,71060,38830,53500,73700,6300,65400,3200,75400,58140,98670,5900,64100,55440,80850,7480,53640,63250,59040,50500,57690,5940,47790,3850,59000,70600,61490,57640,6890,53280,78300,41490,68970,85300,3080,71760,59700,64920,37530,64080,60390,64350,70900,46560,4730,6820,59900,79560,70290,63910,6400,66780,8760,94160,51570,52700,101010,53400,72120,77100,3300,5940,63720,7680,93730,87300,5670,65800,36720,52800,59100,77440,45700,80740,31350,35000,68000,84500,75500,90600,64320,31700,74280,80520,63600,32800,44190,50400,88400,66550,65780,51810,55660,44640,77660,5640,3190,53440,65250,44280,70290,87100,50380,64800,70400,57860,6240,66600,70920,39480,63240,67650,74200,64900,35900,52200,78000,67200,63250,68760,65040,82800,61700,78100,65520,4500,42700,5580,3600,2800,54000,48950,77800,52560,44110,74360,6120,62280,26730,66200,45500,53040,50800,44200,62920,49950,56430,100210,49140,66840,62460,62810,54160,48400,51480,51700,65520,47700,5220,73320,74900,3190,76920,77990,59670,44880,82830,84480,79800,53020,24200,43230,3190,5850,6820,69480,94560,7800,61270,71440,55600,5000,95810,69300,81120,91260,60600,64800,66880,58200,60570,69680,55700,62370,54340,55170,58500,59940,73400,41850,6400,3190,5900,57330,81960,70400,3770,7400,54810,49400,68750,61500,76890,56070,56000,4290,60750,48730,95150,7480,79800,103560,79500,76230,59520,47760,84590,61650,81400,58410,38610,57600,53190,58300,64620,90480,7080,6490,55900,63800,58160,6300,104610,69850,62900,59670,81500,50000,48290,59070,63300,65780,75400,2250,54120,69480,66950,64100,80280,4680,39720,63580,73370,86790,49800,77440,42900,53820,57330,53370,62920,61600,74160,80100,6560,58800,53730,60600,35750,42840,87960,47800,3840,77000,88110,47740,58960,2160,6890,78870,2700,75960,75570,90240,80960,79080,6820,62590,52400,63580,61400,4700,74140,83160,10790,48070,51030,43280,76400,75460,69000,8640,67210,42500,86400,4620,6930,41700,77330,4950,5160,24570,53680,42900,84100,61560,44240,57700,108030,54300,32280,84600,69700,36400,37520,79090,67770,47400,71100,69400,55000,51090,64200,67320,76120,85020,68090,6030,5100,4590,72400,70900,65100,64260,79970,56610,84590,66780,58500,5000,5000,54450,61920,43700,64080,55000,4400,71640,61740,57500,8700,77100,59400,54890,74030,61490,79560,4900,77770,74700,40600,45270,47080,40700,34650,3200,78980,6160,85250,72840,6050,87890,60500,88220,53680,53800,54360,54340,2860,5490,7370,50800,41520,89650,39690,62260,51920,53460,57100,77440,68300,5060,59400,69930,77700,68750,91080,48360,95000,3900,59400,60210,43600,62800,59500,53460,41690,63100,62880,75400,46200,58500,66240,65440,64200,32320,33480,4320,4200,57970,4320,69300,32480,60480,2640,6050,42700,40260,50000,3840,95900,56160,63030,63470,44440,6600,77200,57000,2700,47300,55110,4320,68760,74400,35300,2640,60190,41580,58500,79320,82610,78600,51390,70200,4900,66480,50380,64350,55400,49900,74880,105820,7150,55800,5830,85900,7110,36960,64400,1920,86130,82170,50300,44200,66660,78320,105040,50700,51210,51840,52800,55200,9100,67600,40800,84500,71610,60600,81240,29300,76450,49400,90530,8030,63900,38640,41490,79090,87900,53400,52030,82060,48360,52290,68200,60750,65560,70290,45000,61800,64570,70500,57900,57860,37800,63300,44200,31680,100,56340,69740,60480,80880,49390,69360,3740,5060,35860,50050,59070,28440,45540,38700,5830,57240,46200,57700,56160,44400,92730,30700,56600,3960,34800,79500,56000,73260,4950,48000,52200,73800,78200,55200,57060,4680,53100,3520,72900,70700,60170,74800,4100,61490,7200,45100,66660,76400,58300,57310,53100,74700,60500,84920,61050,69080,4560,67800,5600,9000,85320,5940,51370,51600,5400,48870,5590,54960,39800,56160,52700,68580,90860,5700,94930,46800,56320,83490,57900,49410,66200,64080,42500,48950,58850,82400,54240,74200,47430,68200,63900,59300,66900,40810,75400,4200,52650,42240,59490,44200,7700,61440,54400,58560,67300,36740,85690,34160,61320,79680,61740,6400,60600,56320,52250,53900,2640,8970,6000,55200,7260,64680,59200,4700,69400,40500,60000,67320,75690,64300,64400,97080,5500,30700,33480,65430,42680,87780,72800,71190,3600,62640,69630,76010,44220,57200,3080,75790,32670,3870,91520,74690,4620,55000,59400,55260,51400,48780,52380,74360,53400,71800,68240,61050,5590,46860,4290,78500,70830,68040,63600,43560,60840,68160,5170,57700,89520,4620,45180,45100,83160,86130,48000,3300,57200,7590,80080,4800,3900,90400,62900,54200,51800,6600,74140,67800,55400,49100,98280,66550,70400,53280,84590,54560,82170,61100,51900,3440,51390,76900,77000,60320,60700,53280,34290,46980,36700,60200,6480,87200,108480,67500,46980,5060],\"coloraxis\":\"coloraxis\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"\",\"scene\":\"scene\",\"showlegend\":false,\"x\":[48,42,29,41,44,39,34,37,33,42,42,61,23,34,38,58,26,31,37,39,62,41,55,55,40,35,43,34,40,45,25,37,35,30,37,33,28,49,54,37,26,34,23,30,44,40,33,47,34,35,59,27,39,40,39,26,56,32,39,36,34,44,32,42,42,39,31,64,30,49,42,41,41,37,40,35,45,47,39,38,31,40,29,35,48,41,34,32,36,25,29,23,42,43,42,25,47,25,48,42,41,27,41,33,54,49,61,28,47,31,42,60,41,32,51,46,31,41,38,39,41,36,38,25,35,39,38,32,43,28,45,39,27,33,32,34,40,28,46,32,35,41,34,29,31,58,41,38,27,41,32,45,32,54,33,50,61,59,38,29,36,48,48,30,34,29,28,45,46,37,42,28,29,31,44,46,34,45,40,39,36,54,27,26,46,35,34,39,25,28,57,39,47,32,26,44,36,43,48,43,31,49,39,62,39,43,32,29,48,53,24,37,50,40,33,43,26,28,46,43,44,49,50,50,38,41,52,52,53,37,34,46,42,35,28,54,32,26,41,37,43,38,40,36,28,51,28,44,27,30,28,27,40,61,23,57,36,43,40,30,29,31,43,40,30,57,45,29,37,36,55,40,47,26,39,43,42,41,33,38,39,33,40,58,36,33,31,40,25,39,42,40,31,34,37,31,43,39,35,27,43,31,44,40,47,34,29,37,37,36,41,26,33,59,30,42,46,45,33,30,37,30,44,50,26,55,49,47,40,31,28,46,25,26,30,31,39,37,30,35,45,42,26,47,38,28,56,43,34,39,43,44,26,57,27,43,37,28,33,44,61,24,30,41,46,31,36,47,19,47,57,41,30,31,53,44,29,26,41,32,41,34,29,46,41,30,38,21,36,33,35,48,36,58,31,31,57,46,27,33,53,46,33,51,60,30,41,45,40,45,43,29,44,29,39,32,49,37,44,33,41,37,21,48,31,34,35,31,36,58,47,45,48,34,32,28,23,44,40,29,31,50,33,34,36,52,37,53,32,39,32,30,33,37,30,43,24,28,51,38,44,54,57,41,38,33,34,56,37,35,57,38,51,49,42,36,29,56,53,46,44,21,30,40,56,28,29,24,46,29,33,39,49,43,47,46,44,32,58,49,29,39,38,48,26,46,24,29,24,30,38,48,34,38,60,48,27,39,41,43,43,26,42,30,46,26,45,47,54,34,48,53,38,49,42,23,46,55,63,44,30,41,31,25,40,29,43,50,38,29,37,53,51,53,40,51,35,26,35,38,49,41,27,39,33,50,30,54,42,35,33,39,33,54,32,40,46,39,52,34,45,31,28,41,27,35,30,59,64,25,40,43,41,30,38,36,41,29,41,38,29,31,35,27,27,44,27,39,46,57,46,30,42,27,33,34,43,26,28,36,57,27,28,42,31,60,50,40,39,47,35,37,45,29,35,35,28,45,34,48,38,55,32,38,40,43,36,40,32,32,31,27,54,29,20,34,32,39,43,32,57,48,37,33,46,60,51,40,47,57,36,43,25,28,38,29,29,31,45,30,38,38,27,43,47,50,35,41,47,42,41,38,35,36,30,45,36,37,31,38,31,33,57,41,39,45,43,33,41,46,44,30,62,23,61,29,28,28,44,43,58,34,41,29,43,39,43,22,32,41,31,43,26,34,43,45,48,33,42,34,51,33,50,39,55,41,39,31,44,38,31,40,55,58,35,35,32,36,60,35,31,57,43,30,50,37,39,46,61,37,46,39,37,33,28,32,61,40,38,61,61,29,41,33,48,40,27,30,34,34,39,32,39,32,48,47,56,33,24,24,30,36,34,29,46,42,37,38,34,33,43,30,56,48,25,38,30,42,41,47,29,34,53,41,37,49,32,24,28,26,36,26,46,28,32,55,43,24,34,43,44,39,44,48,47,37,42,43,60,53,21,43,47,46,36,36,45,46,43,30,42,40,44,26,53,43,33,39,44,27,43,34,45,49,39,37,39,57,37,47,34,55,30,31,48,45,30,55,55,38,34,60,35,33,31,38,45,39,43,34,33,21,28,30,27,31,43,53,44,38,48,26,36,45,36,37,38,41,36,33,40,38,35,31,30,46,38,32,30,32,48,34,44,37,31,34,40,59,31,45,47,48,31,57,42,56,32,63,31,55,27,37,46,43,39,38,32,42,25,35,34,35,37,30,37,26,29,32,50,55,35,25,44,37,41,40,33,42,32,37,40,44,43,39,36,32,42,39,46,21,43,44,26,28,30,38,41,34,62,60],\"y\":[\"SC\",\"VA\",\"NY\",\"OH\",\"NY\",\"SC\",\"NY\",\"VA\",\"WV\",\"NC\",\"NY\",\"SC\",\"SC\",\"SC\",\"SC\",\"WV\",\"NY\",\"WV\",\"NY\",\"VA\",\"NY\",\"SC\",\"SC\",\"WV\",\"VA\",\"OH\",\"PA\",\"VA\",\"SC\",\"SC\",\"SC\",\"WV\",\"NY\",\"NY\",\"WV\",\"WV\",\"NY\",\"WV\",\"NY\",\"NC\",\"WV\",\"WV\",\"SC\",\"NC\",\"SC\",\"NY\",\"NC\",\"WV\",\"NY\",\"WV\",\"NY\",\"NY\",\"WV\",\"NC\",\"VA\",\"NY\",\"SC\",\"VA\",\"WV\",\"VA\",\"NY\",\"OH\",\"WV\",\"WV\",\"VA\",\"NY\",\"SC\",\"WV\",\"WV\",\"NC\",\"SC\",\"WV\",\"NC\",\"SC\",\"VA\",\"SC\",\"NY\",\"WV\",\"SC\",\"SC\",\"NC\",\"NC\",\"NY\",\"VA\",\"NY\",\"NY\",\"SC\",\"VA\",\"WV\",\"SC\",\"SC\",\"NY\",\"WV\",\"NC\",\"SC\",\"OH\",\"VA\",\"SC\",\"WV\",\"NC\",\"SC\",\"WV\",\"NC\",\"WV\",\"SC\",\"WV\",\"VA\",\"WV\",\"NY\",\"NY\",\"SC\",\"NC\",\"WV\",\"VA\",\"VA\",\"NY\",\"SC\",\"NY\",\"NY\",\"NY\",\"SC\",\"NY\",\"VA\",\"NC\",\"WV\",\"NY\",\"WV\",\"PA\",\"NY\",\"SC\",\"NY\",\"WV\",\"NC\",\"WV\",\"WV\",\"NY\",\"VA\",\"SC\",\"NC\",\"VA\",\"NY\",\"SC\",\"SC\",\"SC\",\"WV\",\"NC\",\"NC\",\"WV\",\"SC\",\"SC\",\"NY\",\"NC\",\"NY\",\"WV\",\"NC\",\"NY\",\"NY\",\"WV\",\"WV\",\"NY\",\"VA\",\"SC\",\"NY\",\"SC\",\"PA\",\"WV\",\"WV\",\"NY\",\"SC\",\"NY\",\"NY\",\"PA\",\"SC\",\"PA\",\"WV\",\"PA\",\"OH\",\"SC\",\"WV\",\"NY\",\"VA\",\"SC\",\"VA\",\"SC\",\"NY\",\"NY\",\"NC\",\"NY\",\"WV\",\"VA\",\"SC\",\"SC\",\"SC\",\"VA\",\"VA\",\"NC\",\"WV\",\"WV\",\"NY\",\"SC\",\"NY\",\"WV\",\"NY\",\"SC\",\"WV\",\"SC\",\"SC\",\"VA\",\"SC\",\"WV\",\"NC\",\"OH\",\"NY\",\"SC\",\"NC\",\"NC\",\"NY\",\"NC\",\"WV\",\"SC\",\"NY\",\"NY\",\"NY\",\"NY\",\"VA\",\"NY\",\"NY\",\"NY\",\"WV\",\"SC\",\"NY\",\"SC\",\"WV\",\"OH\",\"PA\",\"NY\",\"NY\",\"SC\",\"NY\",\"WV\",\"SC\",\"VA\",\"SC\",\"NY\",\"PA\",\"NY\",\"NY\",\"SC\",\"SC\",\"NC\",\"SC\",\"SC\",\"WV\",\"OH\",\"SC\",\"NY\",\"SC\",\"SC\",\"NY\",\"SC\",\"SC\",\"NC\",\"NY\",\"SC\",\"SC\",\"NC\",\"PA\",\"SC\",\"PA\",\"SC\",\"VA\",\"NY\",\"WV\",\"NY\",\"NY\",\"SC\",\"WV\",\"PA\",\"WV\",\"SC\",\"PA\",\"NY\",\"SC\",\"WV\",\"WV\",\"VA\",\"SC\",\"SC\",\"SC\",\"VA\",\"NC\",\"OH\",\"NC\",\"NY\",\"NC\",\"SC\",\"PA\",\"SC\",\"WV\",\"PA\",\"SC\",\"NY\",\"NC\",\"NY\",\"NY\",\"NY\",\"SC\",\"SC\",\"NY\",\"NY\",\"SC\",\"SC\",\"SC\",\"WV\",\"SC\",\"WV\",\"WV\",\"VA\",\"NY\",\"NY\",\"NY\",\"SC\",\"WV\",\"PA\",\"VA\",\"NY\",\"NY\",\"NY\",\"NY\",\"WV\",\"NY\",\"NY\",\"SC\",\"VA\",\"NC\",\"WV\",\"SC\",\"NY\",\"NY\",\"NY\",\"VA\",\"SC\",\"NY\",\"WV\",\"VA\",\"VA\",\"WV\",\"VA\",\"SC\",\"SC\",\"VA\",\"NC\",\"VA\",\"SC\",\"NY\",\"WV\",\"WV\",\"NY\",\"SC\",\"SC\",\"OH\",\"SC\",\"VA\",\"WV\",\"SC\",\"NC\",\"SC\",\"VA\",\"NC\",\"WV\",\"NC\",\"VA\",\"SC\",\"WV\",\"SC\",\"NY\",\"WV\",\"VA\",\"NY\",\"VA\",\"SC\",\"SC\",\"NY\",\"NC\",\"NY\",\"NY\",\"WV\",\"NY\",\"NY\",\"WV\",\"WV\",\"NY\",\"NY\",\"WV\",\"OH\",\"SC\",\"NY\",\"VA\",\"WV\",\"NY\",\"WV\",\"NY\",\"NY\",\"NC\",\"SC\",\"WV\",\"WV\",\"VA\",\"OH\",\"NC\",\"WV\",\"SC\",\"NY\",\"PA\",\"NC\",\"WV\",\"NY\",\"NY\",\"NC\",\"NY\",\"SC\",\"SC\",\"WV\",\"SC\",\"NY\",\"WV\",\"WV\",\"NC\",\"NC\",\"NY\",\"OH\",\"VA\",\"NC\",\"NY\",\"NC\",\"PA\",\"PA\",\"NC\",\"WV\",\"VA\",\"NY\",\"WV\",\"SC\",\"VA\",\"NC\",\"SC\",\"NY\",\"NC\",\"SC\",\"WV\",\"NY\",\"SC\",\"NY\",\"NY\",\"NY\",\"WV\",\"NY\",\"NC\",\"NC\",\"NY\",\"SC\",\"WV\",\"SC\",\"NY\",\"SC\",\"VA\",\"SC\",\"VA\",\"WV\",\"NC\",\"NY\",\"WV\",\"WV\",\"SC\",\"PA\",\"NC\",\"SC\",\"VA\",\"NC\",\"WV\",\"SC\",\"PA\",\"WV\",\"NY\",\"NC\",\"NY\",\"VA\",\"NY\",\"SC\",\"NY\",\"WV\",\"VA\",\"NY\",\"NY\",\"OH\",\"SC\",\"NY\",\"NY\",\"NY\",\"NC\",\"SC\",\"WV\",\"WV\",\"SC\",\"VA\",\"WV\",\"NY\",\"NY\",\"NY\",\"NY\",\"WV\",\"NY\",\"WV\",\"PA\",\"NY\",\"NY\",\"WV\",\"SC\",\"SC\",\"NY\",\"NY\",\"WV\",\"SC\",\"SC\",\"NC\",\"SC\",\"VA\",\"SC\",\"WV\",\"WV\",\"SC\",\"SC\",\"VA\",\"SC\",\"WV\",\"NY\",\"WV\",\"NY\",\"VA\",\"SC\",\"VA\",\"NC\",\"NC\",\"SC\",\"VA\",\"SC\",\"VA\",\"OH\",\"VA\",\"SC\",\"NC\",\"SC\",\"SC\",\"NC\",\"SC\",\"NY\",\"WV\",\"NC\",\"WV\",\"WV\",\"WV\",\"NY\",\"NY\",\"NY\",\"VA\",\"WV\",\"SC\",\"SC\",\"WV\",\"SC\",\"WV\",\"SC\",\"NY\",\"NY\",\"OH\",\"SC\",\"NY\",\"SC\",\"WV\",\"NY\",\"NC\",\"NC\",\"SC\",\"NY\",\"WV\",\"OH\",\"WV\",\"SC\",\"NY\",\"WV\",\"PA\",\"WV\",\"SC\",\"VA\",\"SC\",\"NC\",\"WV\",\"PA\",\"NY\",\"WV\",\"VA\",\"NC\",\"SC\",\"WV\",\"SC\",\"NY\",\"SC\",\"NY\",\"VA\",\"NY\",\"NY\",\"WV\",\"NY\",\"SC\",\"NY\",\"WV\",\"SC\",\"NY\",\"SC\",\"NY\",\"SC\",\"NY\",\"WV\",\"VA\",\"SC\",\"NC\",\"SC\",\"WV\",\"SC\",\"NY\",\"NY\",\"SC\",\"VA\",\"NY\",\"WV\",\"SC\",\"WV\",\"WV\",\"NC\",\"VA\",\"NY\",\"NY\",\"SC\",\"NC\",\"NY\",\"SC\",\"NY\",\"NY\",\"NY\",\"WV\",\"NY\",\"NY\",\"SC\",\"NY\",\"WV\",\"WV\",\"SC\",\"NC\",\"NC\",\"SC\",\"SC\",\"VA\",\"WV\",\"NY\",\"NY\",\"WV\",\"NY\",\"SC\",\"VA\",\"SC\",\"PA\",\"SC\",\"WV\",\"SC\",\"VA\",\"SC\",\"NY\",\"NY\",\"SC\",\"NC\",\"NY\",\"NC\",\"SC\",\"NC\",\"SC\",\"NY\",\"NY\",\"WV\",\"WV\",\"SC\",\"NY\",\"WV\",\"WV\",\"WV\",\"WV\",\"WV\",\"WV\",\"VA\",\"SC\",\"VA\",\"WV\",\"NY\",\"NY\",\"SC\",\"NY\",\"NY\",\"SC\",\"NY\",\"SC\",\"SC\",\"NC\",\"SC\",\"PA\",\"NC\",\"SC\",\"NC\",\"NY\",\"WV\",\"NY\",\"PA\",\"SC\",\"NY\",\"WV\",\"OH\",\"WV\",\"VA\",\"NC\",\"SC\",\"VA\",\"WV\",\"SC\",\"VA\",\"SC\",\"WV\",\"NY\",\"WV\",\"SC\",\"NC\",\"WV\",\"WV\",\"WV\",\"NC\",\"WV\",\"SC\",\"SC\",\"NC\",\"WV\",\"WV\",\"NY\",\"SC\",\"WV\",\"NY\",\"NC\",\"NY\",\"VA\",\"WV\",\"WV\",\"SC\",\"VA\",\"NY\",\"NY\",\"SC\",\"NY\",\"SC\",\"NY\",\"SC\",\"VA\",\"NY\",\"VA\",\"SC\",\"WV\",\"VA\",\"NY\",\"WV\",\"WV\",\"WV\",\"WV\",\"NC\",\"WV\",\"NC\",\"WV\",\"NC\",\"NY\",\"NY\",\"WV\",\"NY\",\"NY\",\"SC\",\"OH\",\"VA\",\"SC\",\"NY\",\"VA\",\"NY\",\"WV\",\"WV\",\"NY\",\"NC\",\"NY\",\"VA\",\"SC\",\"NY\",\"NY\",\"NC\",\"WV\",\"WV\",\"SC\",\"NY\",\"NC\",\"VA\",\"NY\",\"WV\",\"VA\",\"WV\",\"VA\",\"SC\",\"SC\",\"SC\",\"WV\",\"SC\",\"VA\",\"NY\",\"WV\",\"NC\",\"PA\",\"SC\",\"NY\",\"WV\",\"SC\",\"NC\",\"PA\",\"NY\",\"VA\",\"WV\",\"SC\",\"NC\",\"VA\",\"NC\",\"SC\",\"SC\",\"SC\",\"SC\",\"WV\",\"NY\",\"VA\",\"SC\",\"VA\",\"NY\",\"NY\",\"NC\",\"NY\",\"SC\",\"NY\",\"WV\",\"WV\",\"SC\",\"WV\",\"NY\",\"SC\",\"SC\",\"NY\",\"NY\",\"WV\",\"SC\",\"WV\",\"SC\",\"NY\",\"NY\",\"SC\",\"OH\",\"NY\",\"WV\",\"NY\",\"WV\",\"NC\",\"SC\",\"WV\",\"NY\",\"SC\",\"NC\",\"VA\",\"VA\",\"NY\",\"WV\",\"WV\",\"NC\",\"SC\",\"VA\",\"SC\",\"VA\",\"NC\",\"SC\",\"WV\",\"NC\",\"NY\",\"WV\",\"SC\",\"NY\",\"WV\",\"NC\",\"NY\",\"NY\",\"SC\",\"WV\",\"VA\",\"VA\",\"SC\",\"WV\",\"WV\",\"SC\",\"PA\",\"WV\",\"NC\",\"WV\",\"NY\",\"SC\",\"NY\",\"NY\",\"NY\",\"NY\",\"WV\",\"NY\",\"WV\",\"SC\",\"WV\",\"VA\",\"NY\",\"NY\",\"VA\",\"SC\",\"SC\",\"PA\",\"NC\",\"NY\",\"VA\",\"WV\",\"NY\",\"VA\",\"NY\",\"SC\",\"NY\",\"NY\",\"SC\",\"NC\",\"SC\",\"SC\",\"WV\",\"WV\",\"WV\",\"WV\",\"SC\",\"NC\",\"VA\",\"WV\",\"WV\",\"NY\",\"SC\",\"WV\",\"NC\",\"VA\",\"NY\",\"VA\",\"VA\",\"WV\",\"WV\",\"SC\",\"NC\",\"NC\",\"NY\",\"SC\",\"SC\",\"VA\",\"NY\",\"SC\",\"SC\",\"VA\",\"WV\",\"WV\",\"NY\",\"NY\",\"OH\",\"NY\",\"NY\",\"SC\",\"WV\",\"WV\",\"WV\",\"NC\",\"NY\",\"SC\",\"NY\",\"WV\",\"OH\",\"OH\",\"SC\",\"NC\",\"SC\",\"NC\",\"NY\",\"WV\"],\"z\":[71610,5070,34650,63400,6500,64100,78650,51590,27700,42300,87010,114920,56520,7280,46200,63120,52110,77880,72930,60400,47160,37840,71520,98160,77880,71500,9020,5720,69840,91650,75600,67140,29790,77110,64800,53100,60200,5330,62300,60170,40000,97080,51660,51120,56400,55120,77110,62800,7290,76600,81800,7260,4300,70510,2640,78900,56430,2400,65790,62920,69480,44280,56300,68520,59130,82320,89700,33930,68530,4300,68310,61290,30100,57120,42930,51210,89400,59730,8060,72200,50800,6600,7500,6490,60940,58300,68400,64240,4700,45120,66950,98340,5900,70680,93720,6930,72930,64890,5400,5600,79300,52800,28800,2970,93480,4320,79800,74200,70590,60940,74700,70000,81070,57720,7080,47700,51260,70400,90000,72820,69300,76560,55440,77130,42000,36300,40320,3960,63840,44730,84720,61500,51000,46800,78120,69200,3690,65500,76120,73560,52030,5170,8190,70800,45630,99320,64000,47300,71680,112320,82720,48060,63570,63240,54240,37280,72100,6500,78240,6200,6160,76050,86060,107900,99990,61380,71280,64000,5940,6700,51740,53600,44910,48100,6100,79600,77040,62590,85150,4950,51100,100800,90970,81840,54900,88660,18000,5500,73920,101860,5390,50490,55500,7040,40160,55680,5300,5200,59400,2520,5760,76700,5920,64350,19080,54400,59800,72000,65070,8800,6120,7080,34320,53460,81360,81070,63120,7200,70290,60190,61380,28100,49060,57060,77880,73500,88920,47630,59040,79530,53680,33550,69100,79750,53600,76560,41130,78650,71060,38830,53500,73700,6300,65400,3200,75400,58140,98670,5900,64100,55440,80850,7480,53640,63250,59040,50500,57690,5940,47790,3850,59000,70600,61490,57640,6890,53280,78300,41490,68970,85300,3080,71760,59700,64920,37530,64080,60390,64350,70900,46560,4730,6820,59900,79560,70290,63910,6400,66780,8760,94160,51570,52700,101010,53400,72120,77100,3300,5940,63720,7680,93730,87300,5670,65800,36720,52800,59100,77440,45700,80740,31350,35000,68000,84500,75500,90600,64320,31700,74280,80520,63600,32800,44190,50400,88400,66550,65780,51810,55660,44640,77660,5640,3190,53440,65250,44280,70290,87100,50380,64800,70400,57860,6240,66600,70920,39480,63240,67650,74200,64900,35900,52200,78000,67200,63250,68760,65040,82800,61700,78100,65520,4500,42700,5580,3600,2800,54000,48950,77800,52560,44110,74360,6120,62280,26730,66200,45500,53040,50800,44200,62920,49950,56430,100210,49140,66840,62460,62810,54160,48400,51480,51700,65520,47700,5220,73320,74900,3190,76920,77990,59670,44880,82830,84480,79800,53020,24200,43230,3190,5850,6820,69480,94560,7800,61270,71440,55600,5000,95810,69300,81120,91260,60600,64800,66880,58200,60570,69680,55700,62370,54340,55170,58500,59940,73400,41850,6400,3190,5900,57330,81960,70400,3770,7400,54810,49400,68750,61500,76890,56070,56000,4290,60750,48730,95150,7480,79800,103560,79500,76230,59520,47760,84590,61650,81400,58410,38610,57600,53190,58300,64620,90480,7080,6490,55900,63800,58160,6300,104610,69850,62900,59670,81500,50000,48290,59070,63300,65780,75400,2250,54120,69480,66950,64100,80280,4680,39720,63580,73370,86790,49800,77440,42900,53820,57330,53370,62920,61600,74160,80100,6560,58800,53730,60600,35750,42840,87960,47800,3840,77000,88110,47740,58960,2160,6890,78870,2700,75960,75570,90240,80960,79080,6820,62590,52400,63580,61400,4700,74140,83160,10790,48070,51030,43280,76400,75460,69000,8640,67210,42500,86400,4620,6930,41700,77330,4950,5160,24570,53680,42900,84100,61560,44240,57700,108030,54300,32280,84600,69700,36400,37520,79090,67770,47400,71100,69400,55000,51090,64200,67320,76120,85020,68090,6030,5100,4590,72400,70900,65100,64260,79970,56610,84590,66780,58500,5000,5000,54450,61920,43700,64080,55000,4400,71640,61740,57500,8700,77100,59400,54890,74030,61490,79560,4900,77770,74700,40600,45270,47080,40700,34650,3200,78980,6160,85250,72840,6050,87890,60500,88220,53680,53800,54360,54340,2860,5490,7370,50800,41520,89650,39690,62260,51920,53460,57100,77440,68300,5060,59400,69930,77700,68750,91080,48360,95000,3900,59400,60210,43600,62800,59500,53460,41690,63100,62880,75400,46200,58500,66240,65440,64200,32320,33480,4320,4200,57970,4320,69300,32480,60480,2640,6050,42700,40260,50000,3840,95900,56160,63030,63470,44440,6600,77200,57000,2700,47300,55110,4320,68760,74400,35300,2640,60190,41580,58500,79320,82610,78600,51390,70200,4900,66480,50380,64350,55400,49900,74880,105820,7150,55800,5830,85900,7110,36960,64400,1920,86130,82170,50300,44200,66660,78320,105040,50700,51210,51840,52800,55200,9100,67600,40800,84500,71610,60600,81240,29300,76450,49400,90530,8030,63900,38640,41490,79090,87900,53400,52030,82060,48360,52290,68200,60750,65560,70290,45000,61800,64570,70500,57900,57860,37800,63300,44200,31680,100,56340,69740,60480,80880,49390,69360,3740,5060,35860,50050,59070,28440,45540,38700,5830,57240,46200,57700,56160,44400,92730,30700,56600,3960,34800,79500,56000,73260,4950,48000,52200,73800,78200,55200,57060,4680,53100,3520,72900,70700,60170,74800,4100,61490,7200,45100,66660,76400,58300,57310,53100,74700,60500,84920,61050,69080,4560,67800,5600,9000,85320,5940,51370,51600,5400,48870,5590,54960,39800,56160,52700,68580,90860,5700,94930,46800,56320,83490,57900,49410,66200,64080,42500,48950,58850,82400,54240,74200,47430,68200,63900,59300,66900,40810,75400,4200,52650,42240,59490,44200,7700,61440,54400,58560,67300,36740,85690,34160,61320,79680,61740,6400,60600,56320,52250,53900,2640,8970,6000,55200,7260,64680,59200,4700,69400,40500,60000,67320,75690,64300,64400,97080,5500,30700,33480,65430,42680,87780,72800,71190,3600,62640,69630,76010,44220,57200,3080,75790,32670,3870,91520,74690,4620,55000,59400,55260,51400,48780,52380,74360,53400,71800,68240,61050,5590,46860,4290,78500,70830,68040,63600,43560,60840,68160,5170,57700,89520,4620,45180,45100,83160,86130,48000,3300,57200,7590,80080,4800,3900,90400,62900,54200,51800,6600,74140,67800,55400,49100,98280,66550,70400,53280,84590,54560,82170,61100,51900,3440,51390,76900,77000,60320,60700,53280,34290,46980,36700,60200,6480,87200,108480,67500,46980,5060],\"type\":\"scatter3d\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"scene\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"xaxis\":{\"title\":{\"text\":\"age\"}},\"yaxis\":{\"title\":{\"text\":\"incident_state\"}},\"zaxis\":{\"title\":{\"text\":\"total_claim_amount\"}}},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"total_claim_amount\"}},\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]]},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('d1dd5509-d078-4513-9892-759065bc342f');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a._3d_box(\"age\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "0aAksysTL9Wm",
        "outputId": "93b42923-250f-4534-e349-3b08f0440251"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"725b1786-8347-4ff4-ba19-a237d247dd1a\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"725b1786-8347-4ff4-ba19-a237d247dd1a\")) {                    Plotly.newPlot(                        \"725b1786-8347-4ff4-ba19-a237d247dd1a\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"age=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\"},\"name\":\"\",\"notched\":false,\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x0\":\" \",\"xaxis\":\"x\",\"y\":[48,42,29,41,44,39,34,37,33,42,42,61,23,34,38,58,26,31,37,39,62,41,55,55,40,35,43,34,40,45,25,37,35,30,37,33,28,49,54,37,26,34,23,30,44,40,33,47,34,35,59,27,39,40,39,26,56,32,39,36,34,44,32,42,42,39,31,64,30,49,42,41,41,37,40,35,45,47,39,38,31,40,29,35,48,41,34,32,36,25,29,23,42,43,42,25,47,25,48,42,41,27,41,33,54,49,61,28,47,31,42,60,41,32,51,46,31,41,38,39,41,36,38,25,35,39,38,32,43,28,45,39,27,33,32,34,40,28,46,32,35,41,34,29,31,58,41,38,27,41,32,45,32,54,33,50,61,59,38,29,36,48,48,30,34,29,28,45,46,37,42,28,29,31,44,46,34,45,40,39,36,54,27,26,46,35,34,39,25,28,57,39,47,32,26,44,36,43,48,43,31,49,39,62,39,43,32,29,48,53,24,37,50,40,33,43,26,28,46,43,44,49,50,50,38,41,52,52,53,37,34,46,42,35,28,54,32,26,41,37,43,38,40,36,28,51,28,44,27,30,28,27,40,61,23,57,36,43,40,30,29,31,43,40,30,57,45,29,37,36,55,40,47,26,39,43,42,41,33,38,39,33,40,58,36,33,31,40,25,39,42,40,31,34,37,31,43,39,35,27,43,31,44,40,47,34,29,37,37,36,41,26,33,59,30,42,46,45,33,30,37,30,44,50,26,55,49,47,40,31,28,46,25,26,30,31,39,37,30,35,45,42,26,47,38,28,56,43,34,39,43,44,26,57,27,43,37,28,33,44,61,24,30,41,46,31,36,47,19,47,57,41,30,31,53,44,29,26,41,32,41,34,29,46,41,30,38,21,36,33,35,48,36,58,31,31,57,46,27,33,53,46,33,51,60,30,41,45,40,45,43,29,44,29,39,32,49,37,44,33,41,37,21,48,31,34,35,31,36,58,47,45,48,34,32,28,23,44,40,29,31,50,33,34,36,52,37,53,32,39,32,30,33,37,30,43,24,28,51,38,44,54,57,41,38,33,34,56,37,35,57,38,51,49,42,36,29,56,53,46,44,21,30,40,56,28,29,24,46,29,33,39,49,43,47,46,44,32,58,49,29,39,38,48,26,46,24,29,24,30,38,48,34,38,60,48,27,39,41,43,43,26,42,30,46,26,45,47,54,34,48,53,38,49,42,23,46,55,63,44,30,41,31,25,40,29,43,50,38,29,37,53,51,53,40,51,35,26,35,38,49,41,27,39,33,50,30,54,42,35,33,39,33,54,32,40,46,39,52,34,45,31,28,41,27,35,30,59,64,25,40,43,41,30,38,36,41,29,41,38,29,31,35,27,27,44,27,39,46,57,46,30,42,27,33,34,43,26,28,36,57,27,28,42,31,60,50,40,39,47,35,37,45,29,35,35,28,45,34,48,38,55,32,38,40,43,36,40,32,32,31,27,54,29,20,34,32,39,43,32,57,48,37,33,46,60,51,40,47,57,36,43,25,28,38,29,29,31,45,30,38,38,27,43,47,50,35,41,47,42,41,38,35,36,30,45,36,37,31,38,31,33,57,41,39,45,43,33,41,46,44,30,62,23,61,29,28,28,44,43,58,34,41,29,43,39,43,22,32,41,31,43,26,34,43,45,48,33,42,34,51,33,50,39,55,41,39,31,44,38,31,40,55,58,35,35,32,36,60,35,31,57,43,30,50,37,39,46,61,37,46,39,37,33,28,32,61,40,38,61,61,29,41,33,48,40,27,30,34,34,39,32,39,32,48,47,56,33,24,24,30,36,34,29,46,42,37,38,34,33,43,30,56,48,25,38,30,42,41,47,29,34,53,41,37,49,32,24,28,26,36,26,46,28,32,55,43,24,34,43,44,39,44,48,47,37,42,43,60,53,21,43,47,46,36,36,45,46,43,30,42,40,44,26,53,43,33,39,44,27,43,34,45,49,39,37,39,57,37,47,34,55,30,31,48,45,30,55,55,38,34,60,35,33,31,38,45,39,43,34,33,21,28,30,27,31,43,53,44,38,48,26,36,45,36,37,38,41,36,33,40,38,35,31,30,46,38,32,30,32,48,34,44,37,31,34,40,59,31,45,47,48,31,57,42,56,32,63,31,55,27,37,46,43,39,38,32,42,25,35,34,35,37,30,37,26,29,32,50,55,35,25,44,37,41,40,33,42,32,37,40,44,43,39,36,32,42,39,46,21,43,44,26,28,30,38,41,34,62,60],\"y0\":\" \",\"yaxis\":\"y\",\"type\":\"box\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0]},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"age\"}},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"boxmode\":\"group\"},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('725b1786-8347-4ff4-ba19-a237d247dd1a');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a._3d_scatter(\"age\",\"incident_state\",\"total_claim_amount\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "jvY03mwsGzS-",
        "outputId": "0d59e00f-1ff9-47ce-8dd1-176c1f9ddd2b"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"ac2ddad2-7a31-46b4-aeb5-822ce6bc6864\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"ac2ddad2-7a31-46b4-aeb5-822ce6bc6864\")) {                    Plotly.newPlot(                        \"ac2ddad2-7a31-46b4-aeb5-822ce6bc6864\",                        [{\"hovertemplate\":\"age=%{x}\\u003cbr\\u003eincident_state=%{y}\\u003cbr\\u003etotal_claim_amount=%{marker.color}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":[71610,5070,34650,63400,6500,64100,78650,51590,27700,42300,87010,114920,56520,7280,46200,63120,52110,77880,72930,60400,47160,37840,71520,98160,77880,71500,9020,5720,69840,91650,75600,67140,29790,77110,64800,53100,60200,5330,62300,60170,40000,97080,51660,51120,56400,55120,77110,62800,7290,76600,81800,7260,4300,70510,2640,78900,56430,2400,65790,62920,69480,44280,56300,68520,59130,82320,89700,33930,68530,4300,68310,61290,30100,57120,42930,51210,89400,59730,8060,72200,50800,6600,7500,6490,60940,58300,68400,64240,4700,45120,66950,98340,5900,70680,93720,6930,72930,64890,5400,5600,79300,52800,28800,2970,93480,4320,79800,74200,70590,60940,74700,70000,81070,57720,7080,47700,51260,70400,90000,72820,69300,76560,55440,77130,42000,36300,40320,3960,63840,44730,84720,61500,51000,46800,78120,69200,3690,65500,76120,73560,52030,5170,8190,70800,45630,99320,64000,47300,71680,112320,82720,48060,63570,63240,54240,37280,72100,6500,78240,6200,6160,76050,86060,107900,99990,61380,71280,64000,5940,6700,51740,53600,44910,48100,6100,79600,77040,62590,85150,4950,51100,100800,90970,81840,54900,88660,18000,5500,73920,101860,5390,50490,55500,7040,40160,55680,5300,5200,59400,2520,5760,76700,5920,64350,19080,54400,59800,72000,65070,8800,6120,7080,34320,53460,81360,81070,63120,7200,70290,60190,61380,28100,49060,57060,77880,73500,88920,47630,59040,79530,53680,33550,69100,79750,53600,76560,41130,78650,71060,38830,53500,73700,6300,65400,3200,75400,58140,98670,5900,64100,55440,80850,7480,53640,63250,59040,50500,57690,5940,47790,3850,59000,70600,61490,57640,6890,53280,78300,41490,68970,85300,3080,71760,59700,64920,37530,64080,60390,64350,70900,46560,4730,6820,59900,79560,70290,63910,6400,66780,8760,94160,51570,52700,101010,53400,72120,77100,3300,5940,63720,7680,93730,87300,5670,65800,36720,52800,59100,77440,45700,80740,31350,35000,68000,84500,75500,90600,64320,31700,74280,80520,63600,32800,44190,50400,88400,66550,65780,51810,55660,44640,77660,5640,3190,53440,65250,44280,70290,87100,50380,64800,70400,57860,6240,66600,70920,39480,63240,67650,74200,64900,35900,52200,78000,67200,63250,68760,65040,82800,61700,78100,65520,4500,42700,5580,3600,2800,54000,48950,77800,52560,44110,74360,6120,62280,26730,66200,45500,53040,50800,44200,62920,49950,56430,100210,49140,66840,62460,62810,54160,48400,51480,51700,65520,47700,5220,73320,74900,3190,76920,77990,59670,44880,82830,84480,79800,53020,24200,43230,3190,5850,6820,69480,94560,7800,61270,71440,55600,5000,95810,69300,81120,91260,60600,64800,66880,58200,60570,69680,55700,62370,54340,55170,58500,59940,73400,41850,6400,3190,5900,57330,81960,70400,3770,7400,54810,49400,68750,61500,76890,56070,56000,4290,60750,48730,95150,7480,79800,103560,79500,76230,59520,47760,84590,61650,81400,58410,38610,57600,53190,58300,64620,90480,7080,6490,55900,63800,58160,6300,104610,69850,62900,59670,81500,50000,48290,59070,63300,65780,75400,2250,54120,69480,66950,64100,80280,4680,39720,63580,73370,86790,49800,77440,42900,53820,57330,53370,62920,61600,74160,80100,6560,58800,53730,60600,35750,42840,87960,47800,3840,77000,88110,47740,58960,2160,6890,78870,2700,75960,75570,90240,80960,79080,6820,62590,52400,63580,61400,4700,74140,83160,10790,48070,51030,43280,76400,75460,69000,8640,67210,42500,86400,4620,6930,41700,77330,4950,5160,24570,53680,42900,84100,61560,44240,57700,108030,54300,32280,84600,69700,36400,37520,79090,67770,47400,71100,69400,55000,51090,64200,67320,76120,85020,68090,6030,5100,4590,72400,70900,65100,64260,79970,56610,84590,66780,58500,5000,5000,54450,61920,43700,64080,55000,4400,71640,61740,57500,8700,77100,59400,54890,74030,61490,79560,4900,77770,74700,40600,45270,47080,40700,34650,3200,78980,6160,85250,72840,6050,87890,60500,88220,53680,53800,54360,54340,2860,5490,7370,50800,41520,89650,39690,62260,51920,53460,57100,77440,68300,5060,59400,69930,77700,68750,91080,48360,95000,3900,59400,60210,43600,62800,59500,53460,41690,63100,62880,75400,46200,58500,66240,65440,64200,32320,33480,4320,4200,57970,4320,69300,32480,60480,2640,6050,42700,40260,50000,3840,95900,56160,63030,63470,44440,6600,77200,57000,2700,47300,55110,4320,68760,74400,35300,2640,60190,41580,58500,79320,82610,78600,51390,70200,4900,66480,50380,64350,55400,49900,74880,105820,7150,55800,5830,85900,7110,36960,64400,1920,86130,82170,50300,44200,66660,78320,105040,50700,51210,51840,52800,55200,9100,67600,40800,84500,71610,60600,81240,29300,76450,49400,90530,8030,63900,38640,41490,79090,87900,53400,52030,82060,48360,52290,68200,60750,65560,70290,45000,61800,64570,70500,57900,57860,37800,63300,44200,31680,100,56340,69740,60480,80880,49390,69360,3740,5060,35860,50050,59070,28440,45540,38700,5830,57240,46200,57700,56160,44400,92730,30700,56600,3960,34800,79500,56000,73260,4950,48000,52200,73800,78200,55200,57060,4680,53100,3520,72900,70700,60170,74800,4100,61490,7200,45100,66660,76400,58300,57310,53100,74700,60500,84920,61050,69080,4560,67800,5600,9000,85320,5940,51370,51600,5400,48870,5590,54960,39800,56160,52700,68580,90860,5700,94930,46800,56320,83490,57900,49410,66200,64080,42500,48950,58850,82400,54240,74200,47430,68200,63900,59300,66900,40810,75400,4200,52650,42240,59490,44200,7700,61440,54400,58560,67300,36740,85690,34160,61320,79680,61740,6400,60600,56320,52250,53900,2640,8970,6000,55200,7260,64680,59200,4700,69400,40500,60000,67320,75690,64300,64400,97080,5500,30700,33480,65430,42680,87780,72800,71190,3600,62640,69630,76010,44220,57200,3080,75790,32670,3870,91520,74690,4620,55000,59400,55260,51400,48780,52380,74360,53400,71800,68240,61050,5590,46860,4290,78500,70830,68040,63600,43560,60840,68160,5170,57700,89520,4620,45180,45100,83160,86130,48000,3300,57200,7590,80080,4800,3900,90400,62900,54200,51800,6600,74140,67800,55400,49100,98280,66550,70400,53280,84590,54560,82170,61100,51900,3440,51390,76900,77000,60320,60700,53280,34290,46980,36700,60200,6480,87200,108480,67500,46980,5060],\"coloraxis\":\"coloraxis\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"\",\"scene\":\"scene\",\"showlegend\":false,\"x\":[48,42,29,41,44,39,34,37,33,42,42,61,23,34,38,58,26,31,37,39,62,41,55,55,40,35,43,34,40,45,25,37,35,30,37,33,28,49,54,37,26,34,23,30,44,40,33,47,34,35,59,27,39,40,39,26,56,32,39,36,34,44,32,42,42,39,31,64,30,49,42,41,41,37,40,35,45,47,39,38,31,40,29,35,48,41,34,32,36,25,29,23,42,43,42,25,47,25,48,42,41,27,41,33,54,49,61,28,47,31,42,60,41,32,51,46,31,41,38,39,41,36,38,25,35,39,38,32,43,28,45,39,27,33,32,34,40,28,46,32,35,41,34,29,31,58,41,38,27,41,32,45,32,54,33,50,61,59,38,29,36,48,48,30,34,29,28,45,46,37,42,28,29,31,44,46,34,45,40,39,36,54,27,26,46,35,34,39,25,28,57,39,47,32,26,44,36,43,48,43,31,49,39,62,39,43,32,29,48,53,24,37,50,40,33,43,26,28,46,43,44,49,50,50,38,41,52,52,53,37,34,46,42,35,28,54,32,26,41,37,43,38,40,36,28,51,28,44,27,30,28,27,40,61,23,57,36,43,40,30,29,31,43,40,30,57,45,29,37,36,55,40,47,26,39,43,42,41,33,38,39,33,40,58,36,33,31,40,25,39,42,40,31,34,37,31,43,39,35,27,43,31,44,40,47,34,29,37,37,36,41,26,33,59,30,42,46,45,33,30,37,30,44,50,26,55,49,47,40,31,28,46,25,26,30,31,39,37,30,35,45,42,26,47,38,28,56,43,34,39,43,44,26,57,27,43,37,28,33,44,61,24,30,41,46,31,36,47,19,47,57,41,30,31,53,44,29,26,41,32,41,34,29,46,41,30,38,21,36,33,35,48,36,58,31,31,57,46,27,33,53,46,33,51,60,30,41,45,40,45,43,29,44,29,39,32,49,37,44,33,41,37,21,48,31,34,35,31,36,58,47,45,48,34,32,28,23,44,40,29,31,50,33,34,36,52,37,53,32,39,32,30,33,37,30,43,24,28,51,38,44,54,57,41,38,33,34,56,37,35,57,38,51,49,42,36,29,56,53,46,44,21,30,40,56,28,29,24,46,29,33,39,49,43,47,46,44,32,58,49,29,39,38,48,26,46,24,29,24,30,38,48,34,38,60,48,27,39,41,43,43,26,42,30,46,26,45,47,54,34,48,53,38,49,42,23,46,55,63,44,30,41,31,25,40,29,43,50,38,29,37,53,51,53,40,51,35,26,35,38,49,41,27,39,33,50,30,54,42,35,33,39,33,54,32,40,46,39,52,34,45,31,28,41,27,35,30,59,64,25,40,43,41,30,38,36,41,29,41,38,29,31,35,27,27,44,27,39,46,57,46,30,42,27,33,34,43,26,28,36,57,27,28,42,31,60,50,40,39,47,35,37,45,29,35,35,28,45,34,48,38,55,32,38,40,43,36,40,32,32,31,27,54,29,20,34,32,39,43,32,57,48,37,33,46,60,51,40,47,57,36,43,25,28,38,29,29,31,45,30,38,38,27,43,47,50,35,41,47,42,41,38,35,36,30,45,36,37,31,38,31,33,57,41,39,45,43,33,41,46,44,30,62,23,61,29,28,28,44,43,58,34,41,29,43,39,43,22,32,41,31,43,26,34,43,45,48,33,42,34,51,33,50,39,55,41,39,31,44,38,31,40,55,58,35,35,32,36,60,35,31,57,43,30,50,37,39,46,61,37,46,39,37,33,28,32,61,40,38,61,61,29,41,33,48,40,27,30,34,34,39,32,39,32,48,47,56,33,24,24,30,36,34,29,46,42,37,38,34,33,43,30,56,48,25,38,30,42,41,47,29,34,53,41,37,49,32,24,28,26,36,26,46,28,32,55,43,24,34,43,44,39,44,48,47,37,42,43,60,53,21,43,47,46,36,36,45,46,43,30,42,40,44,26,53,43,33,39,44,27,43,34,45,49,39,37,39,57,37,47,34,55,30,31,48,45,30,55,55,38,34,60,35,33,31,38,45,39,43,34,33,21,28,30,27,31,43,53,44,38,48,26,36,45,36,37,38,41,36,33,40,38,35,31,30,46,38,32,30,32,48,34,44,37,31,34,40,59,31,45,47,48,31,57,42,56,32,63,31,55,27,37,46,43,39,38,32,42,25,35,34,35,37,30,37,26,29,32,50,55,35,25,44,37,41,40,33,42,32,37,40,44,43,39,36,32,42,39,46,21,43,44,26,28,30,38,41,34,62,60],\"y\":[\"SC\",\"VA\",\"NY\",\"OH\",\"NY\",\"SC\",\"NY\",\"VA\",\"WV\",\"NC\",\"NY\",\"SC\",\"SC\",\"SC\",\"SC\",\"WV\",\"NY\",\"WV\",\"NY\",\"VA\",\"NY\",\"SC\",\"SC\",\"WV\",\"VA\",\"OH\",\"PA\",\"VA\",\"SC\",\"SC\",\"SC\",\"WV\",\"NY\",\"NY\",\"WV\",\"WV\",\"NY\",\"WV\",\"NY\",\"NC\",\"WV\",\"WV\",\"SC\",\"NC\",\"SC\",\"NY\",\"NC\",\"WV\",\"NY\",\"WV\",\"NY\",\"NY\",\"WV\",\"NC\",\"VA\",\"NY\",\"SC\",\"VA\",\"WV\",\"VA\",\"NY\",\"OH\",\"WV\",\"WV\",\"VA\",\"NY\",\"SC\",\"WV\",\"WV\",\"NC\",\"SC\",\"WV\",\"NC\",\"SC\",\"VA\",\"SC\",\"NY\",\"WV\",\"SC\",\"SC\",\"NC\",\"NC\",\"NY\",\"VA\",\"NY\",\"NY\",\"SC\",\"VA\",\"WV\",\"SC\",\"SC\",\"NY\",\"WV\",\"NC\",\"SC\",\"OH\",\"VA\",\"SC\",\"WV\",\"NC\",\"SC\",\"WV\",\"NC\",\"WV\",\"SC\",\"WV\",\"VA\",\"WV\",\"NY\",\"NY\",\"SC\",\"NC\",\"WV\",\"VA\",\"VA\",\"NY\",\"SC\",\"NY\",\"NY\",\"NY\",\"SC\",\"NY\",\"VA\",\"NC\",\"WV\",\"NY\",\"WV\",\"PA\",\"NY\",\"SC\",\"NY\",\"WV\",\"NC\",\"WV\",\"WV\",\"NY\",\"VA\",\"SC\",\"NC\",\"VA\",\"NY\",\"SC\",\"SC\",\"SC\",\"WV\",\"NC\",\"NC\",\"WV\",\"SC\",\"SC\",\"NY\",\"NC\",\"NY\",\"WV\",\"NC\",\"NY\",\"NY\",\"WV\",\"WV\",\"NY\",\"VA\",\"SC\",\"NY\",\"SC\",\"PA\",\"WV\",\"WV\",\"NY\",\"SC\",\"NY\",\"NY\",\"PA\",\"SC\",\"PA\",\"WV\",\"PA\",\"OH\",\"SC\",\"WV\",\"NY\",\"VA\",\"SC\",\"VA\",\"SC\",\"NY\",\"NY\",\"NC\",\"NY\",\"WV\",\"VA\",\"SC\",\"SC\",\"SC\",\"VA\",\"VA\",\"NC\",\"WV\",\"WV\",\"NY\",\"SC\",\"NY\",\"WV\",\"NY\",\"SC\",\"WV\",\"SC\",\"SC\",\"VA\",\"SC\",\"WV\",\"NC\",\"OH\",\"NY\",\"SC\",\"NC\",\"NC\",\"NY\",\"NC\",\"WV\",\"SC\",\"NY\",\"NY\",\"NY\",\"NY\",\"VA\",\"NY\",\"NY\",\"NY\",\"WV\",\"SC\",\"NY\",\"SC\",\"WV\",\"OH\",\"PA\",\"NY\",\"NY\",\"SC\",\"NY\",\"WV\",\"SC\",\"VA\",\"SC\",\"NY\",\"PA\",\"NY\",\"NY\",\"SC\",\"SC\",\"NC\",\"SC\",\"SC\",\"WV\",\"OH\",\"SC\",\"NY\",\"SC\",\"SC\",\"NY\",\"SC\",\"SC\",\"NC\",\"NY\",\"SC\",\"SC\",\"NC\",\"PA\",\"SC\",\"PA\",\"SC\",\"VA\",\"NY\",\"WV\",\"NY\",\"NY\",\"SC\",\"WV\",\"PA\",\"WV\",\"SC\",\"PA\",\"NY\",\"SC\",\"WV\",\"WV\",\"VA\",\"SC\",\"SC\",\"SC\",\"VA\",\"NC\",\"OH\",\"NC\",\"NY\",\"NC\",\"SC\",\"PA\",\"SC\",\"WV\",\"PA\",\"SC\",\"NY\",\"NC\",\"NY\",\"NY\",\"NY\",\"SC\",\"SC\",\"NY\",\"NY\",\"SC\",\"SC\",\"SC\",\"WV\",\"SC\",\"WV\",\"WV\",\"VA\",\"NY\",\"NY\",\"NY\",\"SC\",\"WV\",\"PA\",\"VA\",\"NY\",\"NY\",\"NY\",\"NY\",\"WV\",\"NY\",\"NY\",\"SC\",\"VA\",\"NC\",\"WV\",\"SC\",\"NY\",\"NY\",\"NY\",\"VA\",\"SC\",\"NY\",\"WV\",\"VA\",\"VA\",\"WV\",\"VA\",\"SC\",\"SC\",\"VA\",\"NC\",\"VA\",\"SC\",\"NY\",\"WV\",\"WV\",\"NY\",\"SC\",\"SC\",\"OH\",\"SC\",\"VA\",\"WV\",\"SC\",\"NC\",\"SC\",\"VA\",\"NC\",\"WV\",\"NC\",\"VA\",\"SC\",\"WV\",\"SC\",\"NY\",\"WV\",\"VA\",\"NY\",\"VA\",\"SC\",\"SC\",\"NY\",\"NC\",\"NY\",\"NY\",\"WV\",\"NY\",\"NY\",\"WV\",\"WV\",\"NY\",\"NY\",\"WV\",\"OH\",\"SC\",\"NY\",\"VA\",\"WV\",\"NY\",\"WV\",\"NY\",\"NY\",\"NC\",\"SC\",\"WV\",\"WV\",\"VA\",\"OH\",\"NC\",\"WV\",\"SC\",\"NY\",\"PA\",\"NC\",\"WV\",\"NY\",\"NY\",\"NC\",\"NY\",\"SC\",\"SC\",\"WV\",\"SC\",\"NY\",\"WV\",\"WV\",\"NC\",\"NC\",\"NY\",\"OH\",\"VA\",\"NC\",\"NY\",\"NC\",\"PA\",\"PA\",\"NC\",\"WV\",\"VA\",\"NY\",\"WV\",\"SC\",\"VA\",\"NC\",\"SC\",\"NY\",\"NC\",\"SC\",\"WV\",\"NY\",\"SC\",\"NY\",\"NY\",\"NY\",\"WV\",\"NY\",\"NC\",\"NC\",\"NY\",\"SC\",\"WV\",\"SC\",\"NY\",\"SC\",\"VA\",\"SC\",\"VA\",\"WV\",\"NC\",\"NY\",\"WV\",\"WV\",\"SC\",\"PA\",\"NC\",\"SC\",\"VA\",\"NC\",\"WV\",\"SC\",\"PA\",\"WV\",\"NY\",\"NC\",\"NY\",\"VA\",\"NY\",\"SC\",\"NY\",\"WV\",\"VA\",\"NY\",\"NY\",\"OH\",\"SC\",\"NY\",\"NY\",\"NY\",\"NC\",\"SC\",\"WV\",\"WV\",\"SC\",\"VA\",\"WV\",\"NY\",\"NY\",\"NY\",\"NY\",\"WV\",\"NY\",\"WV\",\"PA\",\"NY\",\"NY\",\"WV\",\"SC\",\"SC\",\"NY\",\"NY\",\"WV\",\"SC\",\"SC\",\"NC\",\"SC\",\"VA\",\"SC\",\"WV\",\"WV\",\"SC\",\"SC\",\"VA\",\"SC\",\"WV\",\"NY\",\"WV\",\"NY\",\"VA\",\"SC\",\"VA\",\"NC\",\"NC\",\"SC\",\"VA\",\"SC\",\"VA\",\"OH\",\"VA\",\"SC\",\"NC\",\"SC\",\"SC\",\"NC\",\"SC\",\"NY\",\"WV\",\"NC\",\"WV\",\"WV\",\"WV\",\"NY\",\"NY\",\"NY\",\"VA\",\"WV\",\"SC\",\"SC\",\"WV\",\"SC\",\"WV\",\"SC\",\"NY\",\"NY\",\"OH\",\"SC\",\"NY\",\"SC\",\"WV\",\"NY\",\"NC\",\"NC\",\"SC\",\"NY\",\"WV\",\"OH\",\"WV\",\"SC\",\"NY\",\"WV\",\"PA\",\"WV\",\"SC\",\"VA\",\"SC\",\"NC\",\"WV\",\"PA\",\"NY\",\"WV\",\"VA\",\"NC\",\"SC\",\"WV\",\"SC\",\"NY\",\"SC\",\"NY\",\"VA\",\"NY\",\"NY\",\"WV\",\"NY\",\"SC\",\"NY\",\"WV\",\"SC\",\"NY\",\"SC\",\"NY\",\"SC\",\"NY\",\"WV\",\"VA\",\"SC\",\"NC\",\"SC\",\"WV\",\"SC\",\"NY\",\"NY\",\"SC\",\"VA\",\"NY\",\"WV\",\"SC\",\"WV\",\"WV\",\"NC\",\"VA\",\"NY\",\"NY\",\"SC\",\"NC\",\"NY\",\"SC\",\"NY\",\"NY\",\"NY\",\"WV\",\"NY\",\"NY\",\"SC\",\"NY\",\"WV\",\"WV\",\"SC\",\"NC\",\"NC\",\"SC\",\"SC\",\"VA\",\"WV\",\"NY\",\"NY\",\"WV\",\"NY\",\"SC\",\"VA\",\"SC\",\"PA\",\"SC\",\"WV\",\"SC\",\"VA\",\"SC\",\"NY\",\"NY\",\"SC\",\"NC\",\"NY\",\"NC\",\"SC\",\"NC\",\"SC\",\"NY\",\"NY\",\"WV\",\"WV\",\"SC\",\"NY\",\"WV\",\"WV\",\"WV\",\"WV\",\"WV\",\"WV\",\"VA\",\"SC\",\"VA\",\"WV\",\"NY\",\"NY\",\"SC\",\"NY\",\"NY\",\"SC\",\"NY\",\"SC\",\"SC\",\"NC\",\"SC\",\"PA\",\"NC\",\"SC\",\"NC\",\"NY\",\"WV\",\"NY\",\"PA\",\"SC\",\"NY\",\"WV\",\"OH\",\"WV\",\"VA\",\"NC\",\"SC\",\"VA\",\"WV\",\"SC\",\"VA\",\"SC\",\"WV\",\"NY\",\"WV\",\"SC\",\"NC\",\"WV\",\"WV\",\"WV\",\"NC\",\"WV\",\"SC\",\"SC\",\"NC\",\"WV\",\"WV\",\"NY\",\"SC\",\"WV\",\"NY\",\"NC\",\"NY\",\"VA\",\"WV\",\"WV\",\"SC\",\"VA\",\"NY\",\"NY\",\"SC\",\"NY\",\"SC\",\"NY\",\"SC\",\"VA\",\"NY\",\"VA\",\"SC\",\"WV\",\"VA\",\"NY\",\"WV\",\"WV\",\"WV\",\"WV\",\"NC\",\"WV\",\"NC\",\"WV\",\"NC\",\"NY\",\"NY\",\"WV\",\"NY\",\"NY\",\"SC\",\"OH\",\"VA\",\"SC\",\"NY\",\"VA\",\"NY\",\"WV\",\"WV\",\"NY\",\"NC\",\"NY\",\"VA\",\"SC\",\"NY\",\"NY\",\"NC\",\"WV\",\"WV\",\"SC\",\"NY\",\"NC\",\"VA\",\"NY\",\"WV\",\"VA\",\"WV\",\"VA\",\"SC\",\"SC\",\"SC\",\"WV\",\"SC\",\"VA\",\"NY\",\"WV\",\"NC\",\"PA\",\"SC\",\"NY\",\"WV\",\"SC\",\"NC\",\"PA\",\"NY\",\"VA\",\"WV\",\"SC\",\"NC\",\"VA\",\"NC\",\"SC\",\"SC\",\"SC\",\"SC\",\"WV\",\"NY\",\"VA\",\"SC\",\"VA\",\"NY\",\"NY\",\"NC\",\"NY\",\"SC\",\"NY\",\"WV\",\"WV\",\"SC\",\"WV\",\"NY\",\"SC\",\"SC\",\"NY\",\"NY\",\"WV\",\"SC\",\"WV\",\"SC\",\"NY\",\"NY\",\"SC\",\"OH\",\"NY\",\"WV\",\"NY\",\"WV\",\"NC\",\"SC\",\"WV\",\"NY\",\"SC\",\"NC\",\"VA\",\"VA\",\"NY\",\"WV\",\"WV\",\"NC\",\"SC\",\"VA\",\"SC\",\"VA\",\"NC\",\"SC\",\"WV\",\"NC\",\"NY\",\"WV\",\"SC\",\"NY\",\"WV\",\"NC\",\"NY\",\"NY\",\"SC\",\"WV\",\"VA\",\"VA\",\"SC\",\"WV\",\"WV\",\"SC\",\"PA\",\"WV\",\"NC\",\"WV\",\"NY\",\"SC\",\"NY\",\"NY\",\"NY\",\"NY\",\"WV\",\"NY\",\"WV\",\"SC\",\"WV\",\"VA\",\"NY\",\"NY\",\"VA\",\"SC\",\"SC\",\"PA\",\"NC\",\"NY\",\"VA\",\"WV\",\"NY\",\"VA\",\"NY\",\"SC\",\"NY\",\"NY\",\"SC\",\"NC\",\"SC\",\"SC\",\"WV\",\"WV\",\"WV\",\"WV\",\"SC\",\"NC\",\"VA\",\"WV\",\"WV\",\"NY\",\"SC\",\"WV\",\"NC\",\"VA\",\"NY\",\"VA\",\"VA\",\"WV\",\"WV\",\"SC\",\"NC\",\"NC\",\"NY\",\"SC\",\"SC\",\"VA\",\"NY\",\"SC\",\"SC\",\"VA\",\"WV\",\"WV\",\"NY\",\"NY\",\"OH\",\"NY\",\"NY\",\"SC\",\"WV\",\"WV\",\"WV\",\"NC\",\"NY\",\"SC\",\"NY\",\"WV\",\"OH\",\"OH\",\"SC\",\"NC\",\"SC\",\"NC\",\"NY\",\"WV\"],\"z\":[71610,5070,34650,63400,6500,64100,78650,51590,27700,42300,87010,114920,56520,7280,46200,63120,52110,77880,72930,60400,47160,37840,71520,98160,77880,71500,9020,5720,69840,91650,75600,67140,29790,77110,64800,53100,60200,5330,62300,60170,40000,97080,51660,51120,56400,55120,77110,62800,7290,76600,81800,7260,4300,70510,2640,78900,56430,2400,65790,62920,69480,44280,56300,68520,59130,82320,89700,33930,68530,4300,68310,61290,30100,57120,42930,51210,89400,59730,8060,72200,50800,6600,7500,6490,60940,58300,68400,64240,4700,45120,66950,98340,5900,70680,93720,6930,72930,64890,5400,5600,79300,52800,28800,2970,93480,4320,79800,74200,70590,60940,74700,70000,81070,57720,7080,47700,51260,70400,90000,72820,69300,76560,55440,77130,42000,36300,40320,3960,63840,44730,84720,61500,51000,46800,78120,69200,3690,65500,76120,73560,52030,5170,8190,70800,45630,99320,64000,47300,71680,112320,82720,48060,63570,63240,54240,37280,72100,6500,78240,6200,6160,76050,86060,107900,99990,61380,71280,64000,5940,6700,51740,53600,44910,48100,6100,79600,77040,62590,85150,4950,51100,100800,90970,81840,54900,88660,18000,5500,73920,101860,5390,50490,55500,7040,40160,55680,5300,5200,59400,2520,5760,76700,5920,64350,19080,54400,59800,72000,65070,8800,6120,7080,34320,53460,81360,81070,63120,7200,70290,60190,61380,28100,49060,57060,77880,73500,88920,47630,59040,79530,53680,33550,69100,79750,53600,76560,41130,78650,71060,38830,53500,73700,6300,65400,3200,75400,58140,98670,5900,64100,55440,80850,7480,53640,63250,59040,50500,57690,5940,47790,3850,59000,70600,61490,57640,6890,53280,78300,41490,68970,85300,3080,71760,59700,64920,37530,64080,60390,64350,70900,46560,4730,6820,59900,79560,70290,63910,6400,66780,8760,94160,51570,52700,101010,53400,72120,77100,3300,5940,63720,7680,93730,87300,5670,65800,36720,52800,59100,77440,45700,80740,31350,35000,68000,84500,75500,90600,64320,31700,74280,80520,63600,32800,44190,50400,88400,66550,65780,51810,55660,44640,77660,5640,3190,53440,65250,44280,70290,87100,50380,64800,70400,57860,6240,66600,70920,39480,63240,67650,74200,64900,35900,52200,78000,67200,63250,68760,65040,82800,61700,78100,65520,4500,42700,5580,3600,2800,54000,48950,77800,52560,44110,74360,6120,62280,26730,66200,45500,53040,50800,44200,62920,49950,56430,100210,49140,66840,62460,62810,54160,48400,51480,51700,65520,47700,5220,73320,74900,3190,76920,77990,59670,44880,82830,84480,79800,53020,24200,43230,3190,5850,6820,69480,94560,7800,61270,71440,55600,5000,95810,69300,81120,91260,60600,64800,66880,58200,60570,69680,55700,62370,54340,55170,58500,59940,73400,41850,6400,3190,5900,57330,81960,70400,3770,7400,54810,49400,68750,61500,76890,56070,56000,4290,60750,48730,95150,7480,79800,103560,79500,76230,59520,47760,84590,61650,81400,58410,38610,57600,53190,58300,64620,90480,7080,6490,55900,63800,58160,6300,104610,69850,62900,59670,81500,50000,48290,59070,63300,65780,75400,2250,54120,69480,66950,64100,80280,4680,39720,63580,73370,86790,49800,77440,42900,53820,57330,53370,62920,61600,74160,80100,6560,58800,53730,60600,35750,42840,87960,47800,3840,77000,88110,47740,58960,2160,6890,78870,2700,75960,75570,90240,80960,79080,6820,62590,52400,63580,61400,4700,74140,83160,10790,48070,51030,43280,76400,75460,69000,8640,67210,42500,86400,4620,6930,41700,77330,4950,5160,24570,53680,42900,84100,61560,44240,57700,108030,54300,32280,84600,69700,36400,37520,79090,67770,47400,71100,69400,55000,51090,64200,67320,76120,85020,68090,6030,5100,4590,72400,70900,65100,64260,79970,56610,84590,66780,58500,5000,5000,54450,61920,43700,64080,55000,4400,71640,61740,57500,8700,77100,59400,54890,74030,61490,79560,4900,77770,74700,40600,45270,47080,40700,34650,3200,78980,6160,85250,72840,6050,87890,60500,88220,53680,53800,54360,54340,2860,5490,7370,50800,41520,89650,39690,62260,51920,53460,57100,77440,68300,5060,59400,69930,77700,68750,91080,48360,95000,3900,59400,60210,43600,62800,59500,53460,41690,63100,62880,75400,46200,58500,66240,65440,64200,32320,33480,4320,4200,57970,4320,69300,32480,60480,2640,6050,42700,40260,50000,3840,95900,56160,63030,63470,44440,6600,77200,57000,2700,47300,55110,4320,68760,74400,35300,2640,60190,41580,58500,79320,82610,78600,51390,70200,4900,66480,50380,64350,55400,49900,74880,105820,7150,55800,5830,85900,7110,36960,64400,1920,86130,82170,50300,44200,66660,78320,105040,50700,51210,51840,52800,55200,9100,67600,40800,84500,71610,60600,81240,29300,76450,49400,90530,8030,63900,38640,41490,79090,87900,53400,52030,82060,48360,52290,68200,60750,65560,70290,45000,61800,64570,70500,57900,57860,37800,63300,44200,31680,100,56340,69740,60480,80880,49390,69360,3740,5060,35860,50050,59070,28440,45540,38700,5830,57240,46200,57700,56160,44400,92730,30700,56600,3960,34800,79500,56000,73260,4950,48000,52200,73800,78200,55200,57060,4680,53100,3520,72900,70700,60170,74800,4100,61490,7200,45100,66660,76400,58300,57310,53100,74700,60500,84920,61050,69080,4560,67800,5600,9000,85320,5940,51370,51600,5400,48870,5590,54960,39800,56160,52700,68580,90860,5700,94930,46800,56320,83490,57900,49410,66200,64080,42500,48950,58850,82400,54240,74200,47430,68200,63900,59300,66900,40810,75400,4200,52650,42240,59490,44200,7700,61440,54400,58560,67300,36740,85690,34160,61320,79680,61740,6400,60600,56320,52250,53900,2640,8970,6000,55200,7260,64680,59200,4700,69400,40500,60000,67320,75690,64300,64400,97080,5500,30700,33480,65430,42680,87780,72800,71190,3600,62640,69630,76010,44220,57200,3080,75790,32670,3870,91520,74690,4620,55000,59400,55260,51400,48780,52380,74360,53400,71800,68240,61050,5590,46860,4290,78500,70830,68040,63600,43560,60840,68160,5170,57700,89520,4620,45180,45100,83160,86130,48000,3300,57200,7590,80080,4800,3900,90400,62900,54200,51800,6600,74140,67800,55400,49100,98280,66550,70400,53280,84590,54560,82170,61100,51900,3440,51390,76900,77000,60320,60700,53280,34290,46980,36700,60200,6480,87200,108480,67500,46980,5060],\"type\":\"scatter3d\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"scene\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"xaxis\":{\"title\":{\"text\":\"age\"}},\"yaxis\":{\"title\":{\"text\":\"incident_state\"}},\"zaxis\":{\"title\":{\"text\":\"total_claim_amount\"}}},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"total_claim_amount\"}},\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]]},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('ac2ddad2-7a31-46b4-aeb5-822ce6bc6864');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a._3d_bar(\"incident_state\",\"total_claim_amount\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "U54Y7YMqKth2",
        "outputId": "3cd03465-d408-4175-9325-5106b9152946"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"f218731d-e851-42dc-bdad-03b1d3eae2b3\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"f218731d-e851-42dc-bdad-03b1d3eae2b3\")) {                    Plotly.newPlot(                        \"f218731d-e851-42dc-bdad-03b1d3eae2b3\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"incident_state=%{x}\\u003cbr\\u003etotal_claim_amount=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"textposition\":\"auto\",\"x\":[\"SC\",\"VA\",\"NY\",\"OH\",\"NY\",\"SC\",\"NY\",\"VA\",\"WV\",\"NC\",\"NY\",\"SC\",\"SC\",\"SC\",\"SC\",\"WV\",\"NY\",\"WV\",\"NY\",\"VA\",\"NY\",\"SC\",\"SC\",\"WV\",\"VA\",\"OH\",\"PA\",\"VA\",\"SC\",\"SC\",\"SC\",\"WV\",\"NY\",\"NY\",\"WV\",\"WV\",\"NY\",\"WV\",\"NY\",\"NC\",\"WV\",\"WV\",\"SC\",\"NC\",\"SC\",\"NY\",\"NC\",\"WV\",\"NY\",\"WV\",\"NY\",\"NY\",\"WV\",\"NC\",\"VA\",\"NY\",\"SC\",\"VA\",\"WV\",\"VA\",\"NY\",\"OH\",\"WV\",\"WV\",\"VA\",\"NY\",\"SC\",\"WV\",\"WV\",\"NC\",\"SC\",\"WV\",\"NC\",\"SC\",\"VA\",\"SC\",\"NY\",\"WV\",\"SC\",\"SC\",\"NC\",\"NC\",\"NY\",\"VA\",\"NY\",\"NY\",\"SC\",\"VA\",\"WV\",\"SC\",\"SC\",\"NY\",\"WV\",\"NC\",\"SC\",\"OH\",\"VA\",\"SC\",\"WV\",\"NC\",\"SC\",\"WV\",\"NC\",\"WV\",\"SC\",\"WV\",\"VA\",\"WV\",\"NY\",\"NY\",\"SC\",\"NC\",\"WV\",\"VA\",\"VA\",\"NY\",\"SC\",\"NY\",\"NY\",\"NY\",\"SC\",\"NY\",\"VA\",\"NC\",\"WV\",\"NY\",\"WV\",\"PA\",\"NY\",\"SC\",\"NY\",\"WV\",\"NC\",\"WV\",\"WV\",\"NY\",\"VA\",\"SC\",\"NC\",\"VA\",\"NY\",\"SC\",\"SC\",\"SC\",\"WV\",\"NC\",\"NC\",\"WV\",\"SC\",\"SC\",\"NY\",\"NC\",\"NY\",\"WV\",\"NC\",\"NY\",\"NY\",\"WV\",\"WV\",\"NY\",\"VA\",\"SC\",\"NY\",\"SC\",\"PA\",\"WV\",\"WV\",\"NY\",\"SC\",\"NY\",\"NY\",\"PA\",\"SC\",\"PA\",\"WV\",\"PA\",\"OH\",\"SC\",\"WV\",\"NY\",\"VA\",\"SC\",\"VA\",\"SC\",\"NY\",\"NY\",\"NC\",\"NY\",\"WV\",\"VA\",\"SC\",\"SC\",\"SC\",\"VA\",\"VA\",\"NC\",\"WV\",\"WV\",\"NY\",\"SC\",\"NY\",\"WV\",\"NY\",\"SC\",\"WV\",\"SC\",\"SC\",\"VA\",\"SC\",\"WV\",\"NC\",\"OH\",\"NY\",\"SC\",\"NC\",\"NC\",\"NY\",\"NC\",\"WV\",\"SC\",\"NY\",\"NY\",\"NY\",\"NY\",\"VA\",\"NY\",\"NY\",\"NY\",\"WV\",\"SC\",\"NY\",\"SC\",\"WV\",\"OH\",\"PA\",\"NY\",\"NY\",\"SC\",\"NY\",\"WV\",\"SC\",\"VA\",\"SC\",\"NY\",\"PA\",\"NY\",\"NY\",\"SC\",\"SC\",\"NC\",\"SC\",\"SC\",\"WV\",\"OH\",\"SC\",\"NY\",\"SC\",\"SC\",\"NY\",\"SC\",\"SC\",\"NC\",\"NY\",\"SC\",\"SC\",\"NC\",\"PA\",\"SC\",\"PA\",\"SC\",\"VA\",\"NY\",\"WV\",\"NY\",\"NY\",\"SC\",\"WV\",\"PA\",\"WV\",\"SC\",\"PA\",\"NY\",\"SC\",\"WV\",\"WV\",\"VA\",\"SC\",\"SC\",\"SC\",\"VA\",\"NC\",\"OH\",\"NC\",\"NY\",\"NC\",\"SC\",\"PA\",\"SC\",\"WV\",\"PA\",\"SC\",\"NY\",\"NC\",\"NY\",\"NY\",\"NY\",\"SC\",\"SC\",\"NY\",\"NY\",\"SC\",\"SC\",\"SC\",\"WV\",\"SC\",\"WV\",\"WV\",\"VA\",\"NY\",\"NY\",\"NY\",\"SC\",\"WV\",\"PA\",\"VA\",\"NY\",\"NY\",\"NY\",\"NY\",\"WV\",\"NY\",\"NY\",\"SC\",\"VA\",\"NC\",\"WV\",\"SC\",\"NY\",\"NY\",\"NY\",\"VA\",\"SC\",\"NY\",\"WV\",\"VA\",\"VA\",\"WV\",\"VA\",\"SC\",\"SC\",\"VA\",\"NC\",\"VA\",\"SC\",\"NY\",\"WV\",\"WV\",\"NY\",\"SC\",\"SC\",\"OH\",\"SC\",\"VA\",\"WV\",\"SC\",\"NC\",\"SC\",\"VA\",\"NC\",\"WV\",\"NC\",\"VA\",\"SC\",\"WV\",\"SC\",\"NY\",\"WV\",\"VA\",\"NY\",\"VA\",\"SC\",\"SC\",\"NY\",\"NC\",\"NY\",\"NY\",\"WV\",\"NY\",\"NY\",\"WV\",\"WV\",\"NY\",\"NY\",\"WV\",\"OH\",\"SC\",\"NY\",\"VA\",\"WV\",\"NY\",\"WV\",\"NY\",\"NY\",\"NC\",\"SC\",\"WV\",\"WV\",\"VA\",\"OH\",\"NC\",\"WV\",\"SC\",\"NY\",\"PA\",\"NC\",\"WV\",\"NY\",\"NY\",\"NC\",\"NY\",\"SC\",\"SC\",\"WV\",\"SC\",\"NY\",\"WV\",\"WV\",\"NC\",\"NC\",\"NY\",\"OH\",\"VA\",\"NC\",\"NY\",\"NC\",\"PA\",\"PA\",\"NC\",\"WV\",\"VA\",\"NY\",\"WV\",\"SC\",\"VA\",\"NC\",\"SC\",\"NY\",\"NC\",\"SC\",\"WV\",\"NY\",\"SC\",\"NY\",\"NY\",\"NY\",\"WV\",\"NY\",\"NC\",\"NC\",\"NY\",\"SC\",\"WV\",\"SC\",\"NY\",\"SC\",\"VA\",\"SC\",\"VA\",\"WV\",\"NC\",\"NY\",\"WV\",\"WV\",\"SC\",\"PA\",\"NC\",\"SC\",\"VA\",\"NC\",\"WV\",\"SC\",\"PA\",\"WV\",\"NY\",\"NC\",\"NY\",\"VA\",\"NY\",\"SC\",\"NY\",\"WV\",\"VA\",\"NY\",\"NY\",\"OH\",\"SC\",\"NY\",\"NY\",\"NY\",\"NC\",\"SC\",\"WV\",\"WV\",\"SC\",\"VA\",\"WV\",\"NY\",\"NY\",\"NY\",\"NY\",\"WV\",\"NY\",\"WV\",\"PA\",\"NY\",\"NY\",\"WV\",\"SC\",\"SC\",\"NY\",\"NY\",\"WV\",\"SC\",\"SC\",\"NC\",\"SC\",\"VA\",\"SC\",\"WV\",\"WV\",\"SC\",\"SC\",\"VA\",\"SC\",\"WV\",\"NY\",\"WV\",\"NY\",\"VA\",\"SC\",\"VA\",\"NC\",\"NC\",\"SC\",\"VA\",\"SC\",\"VA\",\"OH\",\"VA\",\"SC\",\"NC\",\"SC\",\"SC\",\"NC\",\"SC\",\"NY\",\"WV\",\"NC\",\"WV\",\"WV\",\"WV\",\"NY\",\"NY\",\"NY\",\"VA\",\"WV\",\"SC\",\"SC\",\"WV\",\"SC\",\"WV\",\"SC\",\"NY\",\"NY\",\"OH\",\"SC\",\"NY\",\"SC\",\"WV\",\"NY\",\"NC\",\"NC\",\"SC\",\"NY\",\"WV\",\"OH\",\"WV\",\"SC\",\"NY\",\"WV\",\"PA\",\"WV\",\"SC\",\"VA\",\"SC\",\"NC\",\"WV\",\"PA\",\"NY\",\"WV\",\"VA\",\"NC\",\"SC\",\"WV\",\"SC\",\"NY\",\"SC\",\"NY\",\"VA\",\"NY\",\"NY\",\"WV\",\"NY\",\"SC\",\"NY\",\"WV\",\"SC\",\"NY\",\"SC\",\"NY\",\"SC\",\"NY\",\"WV\",\"VA\",\"SC\",\"NC\",\"SC\",\"WV\",\"SC\",\"NY\",\"NY\",\"SC\",\"VA\",\"NY\",\"WV\",\"SC\",\"WV\",\"WV\",\"NC\",\"VA\",\"NY\",\"NY\",\"SC\",\"NC\",\"NY\",\"SC\",\"NY\",\"NY\",\"NY\",\"WV\",\"NY\",\"NY\",\"SC\",\"NY\",\"WV\",\"WV\",\"SC\",\"NC\",\"NC\",\"SC\",\"SC\",\"VA\",\"WV\",\"NY\",\"NY\",\"WV\",\"NY\",\"SC\",\"VA\",\"SC\",\"PA\",\"SC\",\"WV\",\"SC\",\"VA\",\"SC\",\"NY\",\"NY\",\"SC\",\"NC\",\"NY\",\"NC\",\"SC\",\"NC\",\"SC\",\"NY\",\"NY\",\"WV\",\"WV\",\"SC\",\"NY\",\"WV\",\"WV\",\"WV\",\"WV\",\"WV\",\"WV\",\"VA\",\"SC\",\"VA\",\"WV\",\"NY\",\"NY\",\"SC\",\"NY\",\"NY\",\"SC\",\"NY\",\"SC\",\"SC\",\"NC\",\"SC\",\"PA\",\"NC\",\"SC\",\"NC\",\"NY\",\"WV\",\"NY\",\"PA\",\"SC\",\"NY\",\"WV\",\"OH\",\"WV\",\"VA\",\"NC\",\"SC\",\"VA\",\"WV\",\"SC\",\"VA\",\"SC\",\"WV\",\"NY\",\"WV\",\"SC\",\"NC\",\"WV\",\"WV\",\"WV\",\"NC\",\"WV\",\"SC\",\"SC\",\"NC\",\"WV\",\"WV\",\"NY\",\"SC\",\"WV\",\"NY\",\"NC\",\"NY\",\"VA\",\"WV\",\"WV\",\"SC\",\"VA\",\"NY\",\"NY\",\"SC\",\"NY\",\"SC\",\"NY\",\"SC\",\"VA\",\"NY\",\"VA\",\"SC\",\"WV\",\"VA\",\"NY\",\"WV\",\"WV\",\"WV\",\"WV\",\"NC\",\"WV\",\"NC\",\"WV\",\"NC\",\"NY\",\"NY\",\"WV\",\"NY\",\"NY\",\"SC\",\"OH\",\"VA\",\"SC\",\"NY\",\"VA\",\"NY\",\"WV\",\"WV\",\"NY\",\"NC\",\"NY\",\"VA\",\"SC\",\"NY\",\"NY\",\"NC\",\"WV\",\"WV\",\"SC\",\"NY\",\"NC\",\"VA\",\"NY\",\"WV\",\"VA\",\"WV\",\"VA\",\"SC\",\"SC\",\"SC\",\"WV\",\"SC\",\"VA\",\"NY\",\"WV\",\"NC\",\"PA\",\"SC\",\"NY\",\"WV\",\"SC\",\"NC\",\"PA\",\"NY\",\"VA\",\"WV\",\"SC\",\"NC\",\"VA\",\"NC\",\"SC\",\"SC\",\"SC\",\"SC\",\"WV\",\"NY\",\"VA\",\"SC\",\"VA\",\"NY\",\"NY\",\"NC\",\"NY\",\"SC\",\"NY\",\"WV\",\"WV\",\"SC\",\"WV\",\"NY\",\"SC\",\"SC\",\"NY\",\"NY\",\"WV\",\"SC\",\"WV\",\"SC\",\"NY\",\"NY\",\"SC\",\"OH\",\"NY\",\"WV\",\"NY\",\"WV\",\"NC\",\"SC\",\"WV\",\"NY\",\"SC\",\"NC\",\"VA\",\"VA\",\"NY\",\"WV\",\"WV\",\"NC\",\"SC\",\"VA\",\"SC\",\"VA\",\"NC\",\"SC\",\"WV\",\"NC\",\"NY\",\"WV\",\"SC\",\"NY\",\"WV\",\"NC\",\"NY\",\"NY\",\"SC\",\"WV\",\"VA\",\"VA\",\"SC\",\"WV\",\"WV\",\"SC\",\"PA\",\"WV\",\"NC\",\"WV\",\"NY\",\"SC\",\"NY\",\"NY\",\"NY\",\"NY\",\"WV\",\"NY\",\"WV\",\"SC\",\"WV\",\"VA\",\"NY\",\"NY\",\"VA\",\"SC\",\"SC\",\"PA\",\"NC\",\"NY\",\"VA\",\"WV\",\"NY\",\"VA\",\"NY\",\"SC\",\"NY\",\"NY\",\"SC\",\"NC\",\"SC\",\"SC\",\"WV\",\"WV\",\"WV\",\"WV\",\"SC\",\"NC\",\"VA\",\"WV\",\"WV\",\"NY\",\"SC\",\"WV\",\"NC\",\"VA\",\"NY\",\"VA\",\"VA\",\"WV\",\"WV\",\"SC\",\"NC\",\"NC\",\"NY\",\"SC\",\"SC\",\"VA\",\"NY\",\"SC\",\"SC\",\"VA\",\"WV\",\"WV\",\"NY\",\"NY\",\"OH\",\"NY\",\"NY\",\"SC\",\"WV\",\"WV\",\"WV\",\"NC\",\"NY\",\"SC\",\"NY\",\"WV\",\"OH\",\"OH\",\"SC\",\"NC\",\"SC\",\"NC\",\"NY\",\"WV\"],\"xaxis\":\"x\",\"y\":[71610,5070,34650,63400,6500,64100,78650,51590,27700,42300,87010,114920,56520,7280,46200,63120,52110,77880,72930,60400,47160,37840,71520,98160,77880,71500,9020,5720,69840,91650,75600,67140,29790,77110,64800,53100,60200,5330,62300,60170,40000,97080,51660,51120,56400,55120,77110,62800,7290,76600,81800,7260,4300,70510,2640,78900,56430,2400,65790,62920,69480,44280,56300,68520,59130,82320,89700,33930,68530,4300,68310,61290,30100,57120,42930,51210,89400,59730,8060,72200,50800,6600,7500,6490,60940,58300,68400,64240,4700,45120,66950,98340,5900,70680,93720,6930,72930,64890,5400,5600,79300,52800,28800,2970,93480,4320,79800,74200,70590,60940,74700,70000,81070,57720,7080,47700,51260,70400,90000,72820,69300,76560,55440,77130,42000,36300,40320,3960,63840,44730,84720,61500,51000,46800,78120,69200,3690,65500,76120,73560,52030,5170,8190,70800,45630,99320,64000,47300,71680,112320,82720,48060,63570,63240,54240,37280,72100,6500,78240,6200,6160,76050,86060,107900,99990,61380,71280,64000,5940,6700,51740,53600,44910,48100,6100,79600,77040,62590,85150,4950,51100,100800,90970,81840,54900,88660,18000,5500,73920,101860,5390,50490,55500,7040,40160,55680,5300,5200,59400,2520,5760,76700,5920,64350,19080,54400,59800,72000,65070,8800,6120,7080,34320,53460,81360,81070,63120,7200,70290,60190,61380,28100,49060,57060,77880,73500,88920,47630,59040,79530,53680,33550,69100,79750,53600,76560,41130,78650,71060,38830,53500,73700,6300,65400,3200,75400,58140,98670,5900,64100,55440,80850,7480,53640,63250,59040,50500,57690,5940,47790,3850,59000,70600,61490,57640,6890,53280,78300,41490,68970,85300,3080,71760,59700,64920,37530,64080,60390,64350,70900,46560,4730,6820,59900,79560,70290,63910,6400,66780,8760,94160,51570,52700,101010,53400,72120,77100,3300,5940,63720,7680,93730,87300,5670,65800,36720,52800,59100,77440,45700,80740,31350,35000,68000,84500,75500,90600,64320,31700,74280,80520,63600,32800,44190,50400,88400,66550,65780,51810,55660,44640,77660,5640,3190,53440,65250,44280,70290,87100,50380,64800,70400,57860,6240,66600,70920,39480,63240,67650,74200,64900,35900,52200,78000,67200,63250,68760,65040,82800,61700,78100,65520,4500,42700,5580,3600,2800,54000,48950,77800,52560,44110,74360,6120,62280,26730,66200,45500,53040,50800,44200,62920,49950,56430,100210,49140,66840,62460,62810,54160,48400,51480,51700,65520,47700,5220,73320,74900,3190,76920,77990,59670,44880,82830,84480,79800,53020,24200,43230,3190,5850,6820,69480,94560,7800,61270,71440,55600,5000,95810,69300,81120,91260,60600,64800,66880,58200,60570,69680,55700,62370,54340,55170,58500,59940,73400,41850,6400,3190,5900,57330,81960,70400,3770,7400,54810,49400,68750,61500,76890,56070,56000,4290,60750,48730,95150,7480,79800,103560,79500,76230,59520,47760,84590,61650,81400,58410,38610,57600,53190,58300,64620,90480,7080,6490,55900,63800,58160,6300,104610,69850,62900,59670,81500,50000,48290,59070,63300,65780,75400,2250,54120,69480,66950,64100,80280,4680,39720,63580,73370,86790,49800,77440,42900,53820,57330,53370,62920,61600,74160,80100,6560,58800,53730,60600,35750,42840,87960,47800,3840,77000,88110,47740,58960,2160,6890,78870,2700,75960,75570,90240,80960,79080,6820,62590,52400,63580,61400,4700,74140,83160,10790,48070,51030,43280,76400,75460,69000,8640,67210,42500,86400,4620,6930,41700,77330,4950,5160,24570,53680,42900,84100,61560,44240,57700,108030,54300,32280,84600,69700,36400,37520,79090,67770,47400,71100,69400,55000,51090,64200,67320,76120,85020,68090,6030,5100,4590,72400,70900,65100,64260,79970,56610,84590,66780,58500,5000,5000,54450,61920,43700,64080,55000,4400,71640,61740,57500,8700,77100,59400,54890,74030,61490,79560,4900,77770,74700,40600,45270,47080,40700,34650,3200,78980,6160,85250,72840,6050,87890,60500,88220,53680,53800,54360,54340,2860,5490,7370,50800,41520,89650,39690,62260,51920,53460,57100,77440,68300,5060,59400,69930,77700,68750,91080,48360,95000,3900,59400,60210,43600,62800,59500,53460,41690,63100,62880,75400,46200,58500,66240,65440,64200,32320,33480,4320,4200,57970,4320,69300,32480,60480,2640,6050,42700,40260,50000,3840,95900,56160,63030,63470,44440,6600,77200,57000,2700,47300,55110,4320,68760,74400,35300,2640,60190,41580,58500,79320,82610,78600,51390,70200,4900,66480,50380,64350,55400,49900,74880,105820,7150,55800,5830,85900,7110,36960,64400,1920,86130,82170,50300,44200,66660,78320,105040,50700,51210,51840,52800,55200,9100,67600,40800,84500,71610,60600,81240,29300,76450,49400,90530,8030,63900,38640,41490,79090,87900,53400,52030,82060,48360,52290,68200,60750,65560,70290,45000,61800,64570,70500,57900,57860,37800,63300,44200,31680,100,56340,69740,60480,80880,49390,69360,3740,5060,35860,50050,59070,28440,45540,38700,5830,57240,46200,57700,56160,44400,92730,30700,56600,3960,34800,79500,56000,73260,4950,48000,52200,73800,78200,55200,57060,4680,53100,3520,72900,70700,60170,74800,4100,61490,7200,45100,66660,76400,58300,57310,53100,74700,60500,84920,61050,69080,4560,67800,5600,9000,85320,5940,51370,51600,5400,48870,5590,54960,39800,56160,52700,68580,90860,5700,94930,46800,56320,83490,57900,49410,66200,64080,42500,48950,58850,82400,54240,74200,47430,68200,63900,59300,66900,40810,75400,4200,52650,42240,59490,44200,7700,61440,54400,58560,67300,36740,85690,34160,61320,79680,61740,6400,60600,56320,52250,53900,2640,8970,6000,55200,7260,64680,59200,4700,69400,40500,60000,67320,75690,64300,64400,97080,5500,30700,33480,65430,42680,87780,72800,71190,3600,62640,69630,76010,44220,57200,3080,75790,32670,3870,91520,74690,4620,55000,59400,55260,51400,48780,52380,74360,53400,71800,68240,61050,5590,46860,4290,78500,70830,68040,63600,43560,60840,68160,5170,57700,89520,4620,45180,45100,83160,86130,48000,3300,57200,7590,80080,4800,3900,90400,62900,54200,51800,6600,74140,67800,55400,49100,98280,66550,70400,53280,84590,54560,82170,61100,51900,3440,51390,76900,77000,60320,60700,53280,34290,46980,36700,60200,6480,87200,108480,67500,46980,5060],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"incident_state\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"total_claim_amount\"}},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"barmode\":\"relative\",\"scene\":{\"xaxis\":{\"title\":{\"text\":\"incident_state\"}},\"yaxis\":{\"title\":{\"text\":\"total_claim_amount\"}}}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('f218731d-e851-42dc-bdad-03b1d3eae2b3');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a.find_columns()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e-t-tjDXernM",
        "outputId": "9b667a46-3e6e-4226-b6c6-824c525075c8"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['months_as_customer',\n",
              " 'age',\n",
              " 'policy_number',\n",
              " 'policy_bind_date',\n",
              " 'policy_state',\n",
              " 'policy_csl',\n",
              " 'policy_deductable',\n",
              " 'policy_annual_premium',\n",
              " 'umbrella_limit',\n",
              " 'insured_zip',\n",
              " 'insured_sex',\n",
              " 'insured_education_level',\n",
              " 'insured_occupation',\n",
              " 'insured_hobbies',\n",
              " 'insured_relationship',\n",
              " 'capital-gains',\n",
              " 'capital-loss',\n",
              " 'incident_date',\n",
              " 'incident_type',\n",
              " 'collision_type',\n",
              " 'incident_severity',\n",
              " 'authorities_contacted',\n",
              " 'incident_state',\n",
              " 'incident_city',\n",
              " 'incident_location',\n",
              " 'incident_hour_of_the_day',\n",
              " 'number_of_vehicles_involved',\n",
              " 'property_damage',\n",
              " 'bodily_injuries',\n",
              " 'witnesses',\n",
              " 'police_report_available',\n",
              " 'total_claim_amount',\n",
              " 'injury_claim',\n",
              " 'property_claim',\n",
              " 'vehicle_claim',\n",
              " 'auto_make',\n",
              " 'auto_model',\n",
              " 'auto_year',\n",
              " 'fraud_reported']"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a.null_percentage()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "2xAc6FN6PxAi",
        "outputId": "b4e3c407-9de9-4f50-efc2-83788a3fade5"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "authorities_contacted          9.1\n",
              "age                            0.0\n",
              "months_as_customer             0.0\n",
              "policy_bind_date               0.0\n",
              "policy_state                   0.0\n",
              "policy_csl                     0.0\n",
              "policy_number                  0.0\n",
              "policy_deductable              0.0\n",
              "policy_annual_premium          0.0\n",
              "insured_zip                    0.0\n",
              "umbrella_limit                 0.0\n",
              "insured_education_level        0.0\n",
              "insured_occupation             0.0\n",
              "insured_hobbies                0.0\n",
              "insured_sex                    0.0\n",
              "insured_relationship           0.0\n",
              "capital-gains                  0.0\n",
              "incident_date                  0.0\n",
              "capital-loss                   0.0\n",
              "incident_type                  0.0\n",
              "collision_type                 0.0\n",
              "incident_severity              0.0\n",
              "incident_state                 0.0\n",
              "incident_city                  0.0\n",
              "incident_location              0.0\n",
              "incident_hour_of_the_day       0.0\n",
              "number_of_vehicles_involved    0.0\n",
              "property_damage                0.0\n",
              "bodily_injuries                0.0\n",
              "witnesses                      0.0\n",
              "police_report_available        0.0\n",
              "total_claim_amount             0.0\n",
              "injury_claim                   0.0\n",
              "property_claim                 0.0\n",
              "vehicle_claim                  0.0\n",
              "auto_make                      0.0\n",
              "auto_model                     0.0\n",
              "auto_year                      0.0\n",
              "fraud_reported                 0.0\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>authorities_contacted</th>\n",
              "      <td>9.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>months_as_customer</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>policy_bind_date</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>policy_state</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>policy_csl</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>policy_number</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>policy_deductable</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>policy_annual_premium</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>insured_zip</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>umbrella_limit</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>insured_education_level</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>insured_occupation</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>insured_hobbies</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>insured_sex</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>insured_relationship</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>capital-gains</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>incident_date</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>capital-loss</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>incident_type</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>collision_type</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>incident_severity</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>incident_state</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>incident_city</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>incident_location</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>incident_hour_of_the_day</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>number_of_vehicles_involved</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>property_damage</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>bodily_injuries</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>witnesses</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>police_report_available</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>total_claim_amount</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>injury_claim</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>property_claim</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>vehicle_claim</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>auto_make</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>auto_model</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>auto_year</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fraud_reported</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a.information()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5txIWR8Be7XT",
        "outputId": "ee319e16-6efe-405e-abb9-486f809791a5"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1000 entries, 0 to 999\n",
            "Data columns (total 39 columns):\n",
            " #   Column                       Non-Null Count  Dtype  \n",
            "---  ------                       --------------  -----  \n",
            " 0   months_as_customer           1000 non-null   int64  \n",
            " 1   age                          1000 non-null   int64  \n",
            " 2   policy_number                1000 non-null   int64  \n",
            " 3   policy_bind_date             1000 non-null   object \n",
            " 4   policy_state                 1000 non-null   object \n",
            " 5   policy_csl                   1000 non-null   object \n",
            " 6   policy_deductable            1000 non-null   int64  \n",
            " 7   policy_annual_premium        1000 non-null   float64\n",
            " 8   umbrella_limit               1000 non-null   int64  \n",
            " 9   insured_zip                  1000 non-null   int64  \n",
            " 10  insured_sex                  1000 non-null   object \n",
            " 11  insured_education_level      1000 non-null   object \n",
            " 12  insured_occupation           1000 non-null   object \n",
            " 13  insured_hobbies              1000 non-null   object \n",
            " 14  insured_relationship         1000 non-null   object \n",
            " 15  capital-gains                1000 non-null   int64  \n",
            " 16  capital-loss                 1000 non-null   int64  \n",
            " 17  incident_date                1000 non-null   object \n",
            " 18  incident_type                1000 non-null   object \n",
            " 19  collision_type               1000 non-null   object \n",
            " 20  incident_severity            1000 non-null   object \n",
            " 21  authorities_contacted        909 non-null    object \n",
            " 22  incident_state               1000 non-null   object \n",
            " 23  incident_city                1000 non-null   object \n",
            " 24  incident_location            1000 non-null   object \n",
            " 25  incident_hour_of_the_day     1000 non-null   int64  \n",
            " 26  number_of_vehicles_involved  1000 non-null   int64  \n",
            " 27  property_damage              1000 non-null   object \n",
            " 28  bodily_injuries              1000 non-null   int64  \n",
            " 29  witnesses                    1000 non-null   int64  \n",
            " 30  police_report_available      1000 non-null   object \n",
            " 31  total_claim_amount           1000 non-null   int64  \n",
            " 32  injury_claim                 1000 non-null   int64  \n",
            " 33  property_claim               1000 non-null   int64  \n",
            " 34  vehicle_claim                1000 non-null   int64  \n",
            " 35  auto_make                    1000 non-null   object \n",
            " 36  auto_model                   1000 non-null   object \n",
            " 37  auto_year                    1000 non-null   int64  \n",
            " 38  fraud_reported               1000 non-null   object \n",
            "dtypes: float64(1), int64(17), object(21)\n",
            "memory usage: 304.8+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a.statistics()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 337
        },
        "id": "4GOlnpD7hFhX",
        "outputId": "a3b7637f-bc51-41a8-aaa3-ba22fd17ccf1"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       months_as_customer          age  policy_number  policy_deductable  \\\n",
              "count         1000.000000  1000.000000    1000.000000        1000.000000   \n",
              "mean           203.954000    38.948000  546238.648000        1136.000000   \n",
              "std            115.113174     9.140287  257063.005276         611.864673   \n",
              "min              0.000000    19.000000  100804.000000         500.000000   \n",
              "25%            115.750000    32.000000  335980.250000         500.000000   \n",
              "50%            199.500000    38.000000  533135.000000        1000.000000   \n",
              "75%            276.250000    44.000000  759099.750000        2000.000000   \n",
              "max            479.000000    64.000000  999435.000000        2000.000000   \n",
              "\n",
              "       policy_annual_premium  umbrella_limit    insured_zip  capital-gains  \\\n",
              "count            1000.000000    1.000000e+03    1000.000000    1000.000000   \n",
              "mean             1256.406150    1.101000e+06  501214.488000   25126.100000   \n",
              "std               244.167395    2.297407e+06   71701.610941   27872.187708   \n",
              "min               433.330000   -1.000000e+06  430104.000000       0.000000   \n",
              "25%              1089.607500    0.000000e+00  448404.500000       0.000000   \n",
              "50%              1257.200000    0.000000e+00  466445.500000       0.000000   \n",
              "75%              1415.695000    0.000000e+00  603251.000000   51025.000000   \n",
              "max              2047.590000    1.000000e+07  620962.000000  100500.000000   \n",
              "\n",
              "        capital-loss  incident_hour_of_the_day  number_of_vehicles_involved  \\\n",
              "count    1000.000000               1000.000000                   1000.00000   \n",
              "mean   -26793.700000                 11.644000                      1.83900   \n",
              "std     28104.096686                  6.951373                      1.01888   \n",
              "min   -111100.000000                  0.000000                      1.00000   \n",
              "25%    -51500.000000                  6.000000                      1.00000   \n",
              "50%    -23250.000000                 12.000000                      1.00000   \n",
              "75%         0.000000                 17.000000                      3.00000   \n",
              "max         0.000000                 23.000000                      4.00000   \n",
              "\n",
              "       bodily_injuries    witnesses  total_claim_amount  injury_claim  \\\n",
              "count      1000.000000  1000.000000          1000.00000   1000.000000   \n",
              "mean          0.992000     1.487000         52761.94000   7433.420000   \n",
              "std           0.820127     1.111335         26401.53319   4880.951853   \n",
              "min           0.000000     0.000000           100.00000      0.000000   \n",
              "25%           0.000000     1.000000         41812.50000   4295.000000   \n",
              "50%           1.000000     1.000000         58055.00000   6775.000000   \n",
              "75%           2.000000     2.000000         70592.50000  11305.000000   \n",
              "max           2.000000     3.000000        114920.00000  21450.000000   \n",
              "\n",
              "       property_claim  vehicle_claim    auto_year  \n",
              "count     1000.000000    1000.000000  1000.000000  \n",
              "mean      7399.570000   37928.950000  2005.103000  \n",
              "std       4824.726179   18886.252893     6.015861  \n",
              "min          0.000000      70.000000  1995.000000  \n",
              "25%       4445.000000   30292.500000  2000.000000  \n",
              "50%       6750.000000   42100.000000  2005.000000  \n",
              "75%      10885.000000   50822.500000  2010.000000  \n",
              "max      23670.000000   79560.000000  2015.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4cd38b35-6e38-4bc0-a3dd-a0b3a315426b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>months_as_customer</th>\n",
              "      <th>age</th>\n",
              "      <th>policy_number</th>\n",
              "      <th>policy_deductable</th>\n",
              "      <th>policy_annual_premium</th>\n",
              "      <th>umbrella_limit</th>\n",
              "      <th>insured_zip</th>\n",
              "      <th>capital-gains</th>\n",
              "      <th>capital-loss</th>\n",
              "      <th>incident_hour_of_the_day</th>\n",
              "      <th>number_of_vehicles_involved</th>\n",
              "      <th>bodily_injuries</th>\n",
              "      <th>witnesses</th>\n",
              "      <th>total_claim_amount</th>\n",
              "      <th>injury_claim</th>\n",
              "      <th>property_claim</th>\n",
              "      <th>vehicle_claim</th>\n",
              "      <th>auto_year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1.000000e+03</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.00000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.00000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>203.954000</td>\n",
              "      <td>38.948000</td>\n",
              "      <td>546238.648000</td>\n",
              "      <td>1136.000000</td>\n",
              "      <td>1256.406150</td>\n",
              "      <td>1.101000e+06</td>\n",
              "      <td>501214.488000</td>\n",
              "      <td>25126.100000</td>\n",
              "      <td>-26793.700000</td>\n",
              "      <td>11.644000</td>\n",
              "      <td>1.83900</td>\n",
              "      <td>0.992000</td>\n",
              "      <td>1.487000</td>\n",
              "      <td>52761.94000</td>\n",
              "      <td>7433.420000</td>\n",
              "      <td>7399.570000</td>\n",
              "      <td>37928.950000</td>\n",
              "      <td>2005.103000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>115.113174</td>\n",
              "      <td>9.140287</td>\n",
              "      <td>257063.005276</td>\n",
              "      <td>611.864673</td>\n",
              "      <td>244.167395</td>\n",
              "      <td>2.297407e+06</td>\n",
              "      <td>71701.610941</td>\n",
              "      <td>27872.187708</td>\n",
              "      <td>28104.096686</td>\n",
              "      <td>6.951373</td>\n",
              "      <td>1.01888</td>\n",
              "      <td>0.820127</td>\n",
              "      <td>1.111335</td>\n",
              "      <td>26401.53319</td>\n",
              "      <td>4880.951853</td>\n",
              "      <td>4824.726179</td>\n",
              "      <td>18886.252893</td>\n",
              "      <td>6.015861</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>19.000000</td>\n",
              "      <td>100804.000000</td>\n",
              "      <td>500.000000</td>\n",
              "      <td>433.330000</td>\n",
              "      <td>-1.000000e+06</td>\n",
              "      <td>430104.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-111100.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>100.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>70.000000</td>\n",
              "      <td>1995.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>115.750000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>335980.250000</td>\n",
              "      <td>500.000000</td>\n",
              "      <td>1089.607500</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>448404.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-51500.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>41812.50000</td>\n",
              "      <td>4295.000000</td>\n",
              "      <td>4445.000000</td>\n",
              "      <td>30292.500000</td>\n",
              "      <td>2000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>199.500000</td>\n",
              "      <td>38.000000</td>\n",
              "      <td>533135.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1257.200000</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>466445.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-23250.000000</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>58055.00000</td>\n",
              "      <td>6775.000000</td>\n",
              "      <td>6750.000000</td>\n",
              "      <td>42100.000000</td>\n",
              "      <td>2005.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>276.250000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>759099.750000</td>\n",
              "      <td>2000.000000</td>\n",
              "      <td>1415.695000</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>603251.000000</td>\n",
              "      <td>51025.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>17.000000</td>\n",
              "      <td>3.00000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>70592.50000</td>\n",
              "      <td>11305.000000</td>\n",
              "      <td>10885.000000</td>\n",
              "      <td>50822.500000</td>\n",
              "      <td>2010.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>479.000000</td>\n",
              "      <td>64.000000</td>\n",
              "      <td>999435.000000</td>\n",
              "      <td>2000.000000</td>\n",
              "      <td>2047.590000</td>\n",
              "      <td>1.000000e+07</td>\n",
              "      <td>620962.000000</td>\n",
              "      <td>100500.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>23.000000</td>\n",
              "      <td>4.00000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>114920.00000</td>\n",
              "      <td>21450.000000</td>\n",
              "      <td>23670.000000</td>\n",
              "      <td>79560.000000</td>\n",
              "      <td>2015.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4cd38b35-6e38-4bc0-a3dd-a0b3a315426b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4cd38b35-6e38-4bc0-a3dd-a0b3a315426b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4cd38b35-6e38-4bc0-a3dd-a0b3a315426b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-65b9e14d-bd8f-4ff6-8217-040d9679ff3b\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-65b9e14d-bd8f-4ff6-8217-040d9679ff3b')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-65b9e14d-bd8f-4ff6-8217-040d9679ff3b button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"a\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"months_as_customer\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 316.23854963005766,\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          203.954,\n          199.5,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 341.5679991570694,\n        \"min\": 9.140286693580283,\n        \"max\": 1000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          38.948,\n          38.0,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"policy_number\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 335259.7263396763,\n        \"min\": 1000.0,\n        \"max\": 999435.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          546238.648,\n          533135.0,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"policy_deductable\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 609.359421931737,\n        \"min\": 500.0,\n        \"max\": 2000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1136.0,\n          2000.0,\n          611.8646732557604\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"policy_annual_premium\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 564.8487977596585,\n        \"min\": 244.16739496140718,\n        \"max\": 2047.59,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1256.4061499999998,\n          1257.1999999999998,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"umbrella_limit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3551098.79532066,\n        \"min\": -1000000.0,\n        \"max\": 10000000.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1000.0,\n          1101000.0,\n          10000000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"insured_zip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 231337.62849006106,\n        \"min\": 1000.0,\n        \"max\": 620962.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          501214.488,\n          466445.5,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"capital-gains\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35522.63393156622,\n        \"min\": 0.0,\n        \"max\": 100500.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1000.0,\n          25126.1,\n          100500.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"capital-loss\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 42818.4153676696,\n        \"min\": -111100.0,\n        \"max\": 28104.09668643602,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1000.0,\n          -26793.7,\n          -23250.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"incident_hour_of_the_day\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 349.7549559937459,\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          11.644,\n          12.0,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"number_of_vehicles_involved\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 352.9057511414557,\n        \"min\": 1.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1000.0,\n          1.839,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bodily_injuries\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 353.21014065696164,\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1000.0,\n          0.992,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"witnesses\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 353.0696706670189,\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1000.0,\n          1.487,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_claim_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 37944.61230160588,\n        \"min\": 100.0,\n        \"max\": 114920.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          52761.94,\n          58055.0,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"injury_claim\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6805.660689211524,\n        \"min\": 0.0,\n        \"max\": 21450.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          7433.42,\n          6775.0,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"property_claim\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7448.473646742933,\n        \"min\": 0.0,\n        \"max\": 23670.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          7399.57,\n          6750.0,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"vehicle_claim\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26473.97289902434,\n        \"min\": 70.0,\n        \"max\": 79560.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          37928.95,\n          42100.0,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"auto_year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 744.3405386135482,\n        \"min\": 6.015860834625563,\n        \"max\": 2015.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2005.103,\n          2005.0,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a.correlation_matrix()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 651
        },
        "id": "k_s2lph7P86D",
        "outputId": "e5d6af75-a254-4dc5-ac8b-ec0b3d3104b7"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                             months_as_customer       age  policy_number  \\\n",
              "months_as_customer                     1.000000  0.922098       0.057555   \n",
              "age                                    0.922098  1.000000       0.059413   \n",
              "policy_number                          0.057555  0.059413       1.000000   \n",
              "policy_deductable                      0.026807  0.029188      -0.006738   \n",
              "policy_annual_premium                  0.005018  0.014404       0.022566   \n",
              "umbrella_limit                         0.015498  0.018126       0.008968   \n",
              "insured_zip                            0.017895  0.025604       0.007083   \n",
              "capital-gains                          0.006399 -0.007075       0.009802   \n",
              "capital-loss                           0.020209  0.007368      -0.005669   \n",
              "incident_hour_of_the_day               0.070639  0.087161       0.000113   \n",
              "number_of_vehicles_involved            0.014736  0.022102       0.013432   \n",
              "bodily_injuries                       -0.010162 -0.015679      -0.004558   \n",
              "witnesses                              0.058383  0.052359      -0.012661   \n",
              "total_claim_amount                     0.062108  0.069863      -0.018009   \n",
              "injury_claim                           0.065329  0.075522      -0.008762   \n",
              "property_claim                         0.034940  0.060898      -0.010678   \n",
              "vehicle_claim                          0.061013  0.062588      -0.020184   \n",
              "auto_year                             -0.000292  0.001354      -0.000183   \n",
              "\n",
              "                             policy_deductable  policy_annual_premium  \\\n",
              "months_as_customer                    0.026807               0.005018   \n",
              "age                                   0.029188               0.014404   \n",
              "policy_number                        -0.006738               0.022566   \n",
              "policy_deductable                     1.000000              -0.003245   \n",
              "policy_annual_premium                -0.003245               1.000000   \n",
              "umbrella_limit                        0.010870              -0.006247   \n",
              "insured_zip                           0.004545               0.032354   \n",
              "capital-gains                         0.035212              -0.013738   \n",
              "capital-loss                         -0.023544               0.023547   \n",
              "incident_hour_of_the_day              0.060935              -0.001578   \n",
              "number_of_vehicles_involved           0.051214              -0.045991   \n",
              "bodily_injuries                      -0.022765               0.026780   \n",
              "witnesses                             0.066639               0.002332   \n",
              "total_claim_amount                    0.022839               0.009094   \n",
              "injury_claim                          0.039107              -0.017633   \n",
              "property_claim                        0.064792              -0.011654   \n",
              "vehicle_claim                         0.005269               0.020246   \n",
              "auto_year                             0.026105              -0.049226   \n",
              "\n",
              "                             umbrella_limit  insured_zip  capital-gains  \\\n",
              "months_as_customer                 0.015498     0.017895       0.006399   \n",
              "age                                0.018126     0.025604      -0.007075   \n",
              "policy_number                      0.008968     0.007083       0.009802   \n",
              "policy_deductable                  0.010870     0.004545       0.035212   \n",
              "policy_annual_premium             -0.006247     0.032354      -0.013738   \n",
              "umbrella_limit                     1.000000     0.019671      -0.047268   \n",
              "insured_zip                        0.019671     1.000000       0.006303   \n",
              "capital-gains                     -0.047268     0.006303       1.000000   \n",
              "capital-loss                      -0.024056     0.049372      -0.046904   \n",
              "incident_hour_of_the_day          -0.023257     0.008274      -0.016406   \n",
              "number_of_vehicles_involved       -0.021270     0.027448       0.061643   \n",
              "bodily_injuries                    0.022743     0.028695       0.055829   \n",
              "witnesses                         -0.006738     0.019805      -0.017651   \n",
              "total_claim_amount                -0.040344    -0.033873       0.015980   \n",
              "injury_claim                      -0.045412    -0.017495       0.025934   \n",
              "property_claim                    -0.023790    -0.006841      -0.000779   \n",
              "vehicle_claim                     -0.038584    -0.041083       0.015836   \n",
              "auto_year                          0.009893    -0.032736       0.031398   \n",
              "\n",
              "                             capital-loss  incident_hour_of_the_day  \\\n",
              "months_as_customer               0.020209                  0.070639   \n",
              "age                              0.007368                  0.087161   \n",
              "policy_number                   -0.005669                  0.000113   \n",
              "policy_deductable               -0.023544                  0.060935   \n",
              "policy_annual_premium            0.023547                 -0.001578   \n",
              "umbrella_limit                  -0.024056                 -0.023257   \n",
              "insured_zip                      0.049372                  0.008274   \n",
              "capital-gains                   -0.046904                 -0.016406   \n",
              "capital-loss                     1.000000                 -0.025054   \n",
              "incident_hour_of_the_day        -0.025054                  1.000000   \n",
              "number_of_vehicles_involved     -0.014895                  0.120794   \n",
              "bodily_injuries                 -0.024418                 -0.034563   \n",
              "witnesses                       -0.041330                  0.006527   \n",
              "total_claim_amount              -0.036060                  0.217702   \n",
              "injury_claim                    -0.046060                  0.165768   \n",
              "property_claim                  -0.022863                  0.179536   \n",
              "vehicle_claim                   -0.032665                  0.215626   \n",
              "auto_year                       -0.056615                  0.021368   \n",
              "\n",
              "                             number_of_vehicles_involved  bodily_injuries  \\\n",
              "months_as_customer                              0.014736        -0.010162   \n",
              "age                                             0.022102        -0.015679   \n",
              "policy_number                                   0.013432        -0.004558   \n",
              "policy_deductable                               0.051214        -0.022765   \n",
              "policy_annual_premium                          -0.045991         0.026780   \n",
              "umbrella_limit                                 -0.021270         0.022743   \n",
              "insured_zip                                     0.027448         0.028695   \n",
              "capital-gains                                   0.061643         0.055829   \n",
              "capital-loss                                   -0.014895        -0.024418   \n",
              "incident_hour_of_the_day                        0.120794        -0.034563   \n",
              "number_of_vehicles_involved                     1.000000         0.014030   \n",
              "bodily_injuries                                 0.014030         1.000000   \n",
              "witnesses                                      -0.014669        -0.005606   \n",
              "total_claim_amount                              0.274278         0.047093   \n",
              "injury_claim                                    0.224650         0.047319   \n",
              "property_claim                                  0.219084         0.039749   \n",
              "vehicle_claim                                   0.269393         0.043449   \n",
              "auto_year                                       0.034554        -0.020527   \n",
              "\n",
              "                             witnesses  total_claim_amount  injury_claim  \\\n",
              "months_as_customer            0.058383            0.062108      0.065329   \n",
              "age                           0.052359            0.069863      0.075522   \n",
              "policy_number                -0.012661           -0.018009     -0.008762   \n",
              "policy_deductable             0.066639            0.022839      0.039107   \n",
              "policy_annual_premium         0.002332            0.009094     -0.017633   \n",
              "umbrella_limit               -0.006738           -0.040344     -0.045412   \n",
              "insured_zip                   0.019805           -0.033873     -0.017495   \n",
              "capital-gains                -0.017651            0.015980      0.025934   \n",
              "capital-loss                 -0.041330           -0.036060     -0.046060   \n",
              "incident_hour_of_the_day      0.006527            0.217702      0.165768   \n",
              "number_of_vehicles_involved  -0.014669            0.274278      0.224650   \n",
              "bodily_injuries              -0.005606            0.047093      0.047319   \n",
              "witnesses                     1.000000           -0.011114     -0.024843   \n",
              "total_claim_amount           -0.011114            1.000000      0.805025   \n",
              "injury_claim                 -0.024843            0.805025      1.000000   \n",
              "property_claim                0.052640            0.810686      0.563866   \n",
              "vehicle_claim                -0.022564            0.982773      0.722878   \n",
              "auto_year                     0.045791           -0.035781     -0.013718   \n",
              "\n",
              "                             property_claim  vehicle_claim  auto_year  \n",
              "months_as_customer                 0.034940       0.061013  -0.000292  \n",
              "age                                0.060898       0.062588   0.001354  \n",
              "policy_number                     -0.010678      -0.020184  -0.000183  \n",
              "policy_deductable                  0.064792       0.005269   0.026105  \n",
              "policy_annual_premium             -0.011654       0.020246  -0.049226  \n",
              "umbrella_limit                    -0.023790      -0.038584   0.009893  \n",
              "insured_zip                       -0.006841      -0.041083  -0.032736  \n",
              "capital-gains                     -0.000779       0.015836   0.031398  \n",
              "capital-loss                      -0.022863      -0.032665  -0.056615  \n",
              "incident_hour_of_the_day           0.179536       0.215626   0.021368  \n",
              "number_of_vehicles_involved        0.219084       0.269393   0.034554  \n",
              "bodily_injuries                    0.039749       0.043449  -0.020527  \n",
              "witnesses                          0.052640      -0.022564   0.045791  \n",
              "total_claim_amount                 0.810686       0.982773  -0.035781  \n",
              "injury_claim                       0.563866       0.722878  -0.013718  \n",
              "property_claim                     1.000000       0.732090  -0.014508  \n",
              "vehicle_claim                      0.732090       1.000000  -0.042768  \n",
              "auto_year                         -0.014508      -0.042768   1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-22c691d8-6a3f-46eb-b31c-e68d94f5f43e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>months_as_customer</th>\n",
              "      <th>age</th>\n",
              "      <th>policy_number</th>\n",
              "      <th>policy_deductable</th>\n",
              "      <th>policy_annual_premium</th>\n",
              "      <th>umbrella_limit</th>\n",
              "      <th>insured_zip</th>\n",
              "      <th>capital-gains</th>\n",
              "      <th>capital-loss</th>\n",
              "      <th>incident_hour_of_the_day</th>\n",
              "      <th>number_of_vehicles_involved</th>\n",
              "      <th>bodily_injuries</th>\n",
              "      <th>witnesses</th>\n",
              "      <th>total_claim_amount</th>\n",
              "      <th>injury_claim</th>\n",
              "      <th>property_claim</th>\n",
              "      <th>vehicle_claim</th>\n",
              "      <th>auto_year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>months_as_customer</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.922098</td>\n",
              "      <td>0.057555</td>\n",
              "      <td>0.026807</td>\n",
              "      <td>0.005018</td>\n",
              "      <td>0.015498</td>\n",
              "      <td>0.017895</td>\n",
              "      <td>0.006399</td>\n",
              "      <td>0.020209</td>\n",
              "      <td>0.070639</td>\n",
              "      <td>0.014736</td>\n",
              "      <td>-0.010162</td>\n",
              "      <td>0.058383</td>\n",
              "      <td>0.062108</td>\n",
              "      <td>0.065329</td>\n",
              "      <td>0.034940</td>\n",
              "      <td>0.061013</td>\n",
              "      <td>-0.000292</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>0.922098</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.059413</td>\n",
              "      <td>0.029188</td>\n",
              "      <td>0.014404</td>\n",
              "      <td>0.018126</td>\n",
              "      <td>0.025604</td>\n",
              "      <td>-0.007075</td>\n",
              "      <td>0.007368</td>\n",
              "      <td>0.087161</td>\n",
              "      <td>0.022102</td>\n",
              "      <td>-0.015679</td>\n",
              "      <td>0.052359</td>\n",
              "      <td>0.069863</td>\n",
              "      <td>0.075522</td>\n",
              "      <td>0.060898</td>\n",
              "      <td>0.062588</td>\n",
              "      <td>0.001354</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>policy_number</th>\n",
              "      <td>0.057555</td>\n",
              "      <td>0.059413</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.006738</td>\n",
              "      <td>0.022566</td>\n",
              "      <td>0.008968</td>\n",
              "      <td>0.007083</td>\n",
              "      <td>0.009802</td>\n",
              "      <td>-0.005669</td>\n",
              "      <td>0.000113</td>\n",
              "      <td>0.013432</td>\n",
              "      <td>-0.004558</td>\n",
              "      <td>-0.012661</td>\n",
              "      <td>-0.018009</td>\n",
              "      <td>-0.008762</td>\n",
              "      <td>-0.010678</td>\n",
              "      <td>-0.020184</td>\n",
              "      <td>-0.000183</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>policy_deductable</th>\n",
              "      <td>0.026807</td>\n",
              "      <td>0.029188</td>\n",
              "      <td>-0.006738</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.003245</td>\n",
              "      <td>0.010870</td>\n",
              "      <td>0.004545</td>\n",
              "      <td>0.035212</td>\n",
              "      <td>-0.023544</td>\n",
              "      <td>0.060935</td>\n",
              "      <td>0.051214</td>\n",
              "      <td>-0.022765</td>\n",
              "      <td>0.066639</td>\n",
              "      <td>0.022839</td>\n",
              "      <td>0.039107</td>\n",
              "      <td>0.064792</td>\n",
              "      <td>0.005269</td>\n",
              "      <td>0.026105</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>policy_annual_premium</th>\n",
              "      <td>0.005018</td>\n",
              "      <td>0.014404</td>\n",
              "      <td>0.022566</td>\n",
              "      <td>-0.003245</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.006247</td>\n",
              "      <td>0.032354</td>\n",
              "      <td>-0.013738</td>\n",
              "      <td>0.023547</td>\n",
              "      <td>-0.001578</td>\n",
              "      <td>-0.045991</td>\n",
              "      <td>0.026780</td>\n",
              "      <td>0.002332</td>\n",
              "      <td>0.009094</td>\n",
              "      <td>-0.017633</td>\n",
              "      <td>-0.011654</td>\n",
              "      <td>0.020246</td>\n",
              "      <td>-0.049226</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>umbrella_limit</th>\n",
              "      <td>0.015498</td>\n",
              "      <td>0.018126</td>\n",
              "      <td>0.008968</td>\n",
              "      <td>0.010870</td>\n",
              "      <td>-0.006247</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.019671</td>\n",
              "      <td>-0.047268</td>\n",
              "      <td>-0.024056</td>\n",
              "      <td>-0.023257</td>\n",
              "      <td>-0.021270</td>\n",
              "      <td>0.022743</td>\n",
              "      <td>-0.006738</td>\n",
              "      <td>-0.040344</td>\n",
              "      <td>-0.045412</td>\n",
              "      <td>-0.023790</td>\n",
              "      <td>-0.038584</td>\n",
              "      <td>0.009893</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>insured_zip</th>\n",
              "      <td>0.017895</td>\n",
              "      <td>0.025604</td>\n",
              "      <td>0.007083</td>\n",
              "      <td>0.004545</td>\n",
              "      <td>0.032354</td>\n",
              "      <td>0.019671</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.006303</td>\n",
              "      <td>0.049372</td>\n",
              "      <td>0.008274</td>\n",
              "      <td>0.027448</td>\n",
              "      <td>0.028695</td>\n",
              "      <td>0.019805</td>\n",
              "      <td>-0.033873</td>\n",
              "      <td>-0.017495</td>\n",
              "      <td>-0.006841</td>\n",
              "      <td>-0.041083</td>\n",
              "      <td>-0.032736</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>capital-gains</th>\n",
              "      <td>0.006399</td>\n",
              "      <td>-0.007075</td>\n",
              "      <td>0.009802</td>\n",
              "      <td>0.035212</td>\n",
              "      <td>-0.013738</td>\n",
              "      <td>-0.047268</td>\n",
              "      <td>0.006303</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.046904</td>\n",
              "      <td>-0.016406</td>\n",
              "      <td>0.061643</td>\n",
              "      <td>0.055829</td>\n",
              "      <td>-0.017651</td>\n",
              "      <td>0.015980</td>\n",
              "      <td>0.025934</td>\n",
              "      <td>-0.000779</td>\n",
              "      <td>0.015836</td>\n",
              "      <td>0.031398</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>capital-loss</th>\n",
              "      <td>0.020209</td>\n",
              "      <td>0.007368</td>\n",
              "      <td>-0.005669</td>\n",
              "      <td>-0.023544</td>\n",
              "      <td>0.023547</td>\n",
              "      <td>-0.024056</td>\n",
              "      <td>0.049372</td>\n",
              "      <td>-0.046904</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.025054</td>\n",
              "      <td>-0.014895</td>\n",
              "      <td>-0.024418</td>\n",
              "      <td>-0.041330</td>\n",
              "      <td>-0.036060</td>\n",
              "      <td>-0.046060</td>\n",
              "      <td>-0.022863</td>\n",
              "      <td>-0.032665</td>\n",
              "      <td>-0.056615</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>incident_hour_of_the_day</th>\n",
              "      <td>0.070639</td>\n",
              "      <td>0.087161</td>\n",
              "      <td>0.000113</td>\n",
              "      <td>0.060935</td>\n",
              "      <td>-0.001578</td>\n",
              "      <td>-0.023257</td>\n",
              "      <td>0.008274</td>\n",
              "      <td>-0.016406</td>\n",
              "      <td>-0.025054</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.120794</td>\n",
              "      <td>-0.034563</td>\n",
              "      <td>0.006527</td>\n",
              "      <td>0.217702</td>\n",
              "      <td>0.165768</td>\n",
              "      <td>0.179536</td>\n",
              "      <td>0.215626</td>\n",
              "      <td>0.021368</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>number_of_vehicles_involved</th>\n",
              "      <td>0.014736</td>\n",
              "      <td>0.022102</td>\n",
              "      <td>0.013432</td>\n",
              "      <td>0.051214</td>\n",
              "      <td>-0.045991</td>\n",
              "      <td>-0.021270</td>\n",
              "      <td>0.027448</td>\n",
              "      <td>0.061643</td>\n",
              "      <td>-0.014895</td>\n",
              "      <td>0.120794</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.014030</td>\n",
              "      <td>-0.014669</td>\n",
              "      <td>0.274278</td>\n",
              "      <td>0.224650</td>\n",
              "      <td>0.219084</td>\n",
              "      <td>0.269393</td>\n",
              "      <td>0.034554</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>bodily_injuries</th>\n",
              "      <td>-0.010162</td>\n",
              "      <td>-0.015679</td>\n",
              "      <td>-0.004558</td>\n",
              "      <td>-0.022765</td>\n",
              "      <td>0.026780</td>\n",
              "      <td>0.022743</td>\n",
              "      <td>0.028695</td>\n",
              "      <td>0.055829</td>\n",
              "      <td>-0.024418</td>\n",
              "      <td>-0.034563</td>\n",
              "      <td>0.014030</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.005606</td>\n",
              "      <td>0.047093</td>\n",
              "      <td>0.047319</td>\n",
              "      <td>0.039749</td>\n",
              "      <td>0.043449</td>\n",
              "      <td>-0.020527</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>witnesses</th>\n",
              "      <td>0.058383</td>\n",
              "      <td>0.052359</td>\n",
              "      <td>-0.012661</td>\n",
              "      <td>0.066639</td>\n",
              "      <td>0.002332</td>\n",
              "      <td>-0.006738</td>\n",
              "      <td>0.019805</td>\n",
              "      <td>-0.017651</td>\n",
              "      <td>-0.041330</td>\n",
              "      <td>0.006527</td>\n",
              "      <td>-0.014669</td>\n",
              "      <td>-0.005606</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.011114</td>\n",
              "      <td>-0.024843</td>\n",
              "      <td>0.052640</td>\n",
              "      <td>-0.022564</td>\n",
              "      <td>0.045791</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>total_claim_amount</th>\n",
              "      <td>0.062108</td>\n",
              "      <td>0.069863</td>\n",
              "      <td>-0.018009</td>\n",
              "      <td>0.022839</td>\n",
              "      <td>0.009094</td>\n",
              "      <td>-0.040344</td>\n",
              "      <td>-0.033873</td>\n",
              "      <td>0.015980</td>\n",
              "      <td>-0.036060</td>\n",
              "      <td>0.217702</td>\n",
              "      <td>0.274278</td>\n",
              "      <td>0.047093</td>\n",
              "      <td>-0.011114</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.805025</td>\n",
              "      <td>0.810686</td>\n",
              "      <td>0.982773</td>\n",
              "      <td>-0.035781</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>injury_claim</th>\n",
              "      <td>0.065329</td>\n",
              "      <td>0.075522</td>\n",
              "      <td>-0.008762</td>\n",
              "      <td>0.039107</td>\n",
              "      <td>-0.017633</td>\n",
              "      <td>-0.045412</td>\n",
              "      <td>-0.017495</td>\n",
              "      <td>0.025934</td>\n",
              "      <td>-0.046060</td>\n",
              "      <td>0.165768</td>\n",
              "      <td>0.224650</td>\n",
              "      <td>0.047319</td>\n",
              "      <td>-0.024843</td>\n",
              "      <td>0.805025</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.563866</td>\n",
              "      <td>0.722878</td>\n",
              "      <td>-0.013718</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>property_claim</th>\n",
              "      <td>0.034940</td>\n",
              "      <td>0.060898</td>\n",
              "      <td>-0.010678</td>\n",
              "      <td>0.064792</td>\n",
              "      <td>-0.011654</td>\n",
              "      <td>-0.023790</td>\n",
              "      <td>-0.006841</td>\n",
              "      <td>-0.000779</td>\n",
              "      <td>-0.022863</td>\n",
              "      <td>0.179536</td>\n",
              "      <td>0.219084</td>\n",
              "      <td>0.039749</td>\n",
              "      <td>0.052640</td>\n",
              "      <td>0.810686</td>\n",
              "      <td>0.563866</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.732090</td>\n",
              "      <td>-0.014508</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>vehicle_claim</th>\n",
              "      <td>0.061013</td>\n",
              "      <td>0.062588</td>\n",
              "      <td>-0.020184</td>\n",
              "      <td>0.005269</td>\n",
              "      <td>0.020246</td>\n",
              "      <td>-0.038584</td>\n",
              "      <td>-0.041083</td>\n",
              "      <td>0.015836</td>\n",
              "      <td>-0.032665</td>\n",
              "      <td>0.215626</td>\n",
              "      <td>0.269393</td>\n",
              "      <td>0.043449</td>\n",
              "      <td>-0.022564</td>\n",
              "      <td>0.982773</td>\n",
              "      <td>0.722878</td>\n",
              "      <td>0.732090</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.042768</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>auto_year</th>\n",
              "      <td>-0.000292</td>\n",
              "      <td>0.001354</td>\n",
              "      <td>-0.000183</td>\n",
              "      <td>0.026105</td>\n",
              "      <td>-0.049226</td>\n",
              "      <td>0.009893</td>\n",
              "      <td>-0.032736</td>\n",
              "      <td>0.031398</td>\n",
              "      <td>-0.056615</td>\n",
              "      <td>0.021368</td>\n",
              "      <td>0.034554</td>\n",
              "      <td>-0.020527</td>\n",
              "      <td>0.045791</td>\n",
              "      <td>-0.035781</td>\n",
              "      <td>-0.013718</td>\n",
              "      <td>-0.014508</td>\n",
              "      <td>-0.042768</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-22c691d8-6a3f-46eb-b31c-e68d94f5f43e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-22c691d8-6a3f-46eb-b31c-e68d94f5f43e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-22c691d8-6a3f-46eb-b31c-e68d94f5f43e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-6af4e0cf-6a18-4c1b-be6f-3762179e0cea\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6af4e0cf-6a18-4c1b-be6f-3762179e0cea')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-6af4e0cf-6a18-4c1b-be6f-3762179e0cea button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"a\",\n  \"rows\": 18,\n  \"fields\": [\n    {\n      \"column\": \"months_as_customer\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3019117505729965,\n        \"min\": -0.010161564419988944,\n        \"max\": 1.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          1.0,\n          0.9220983225789804,\n          0.020209212437198525\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.301181886280811,\n        \"min\": -0.015679086795352157,\n        \"max\": 1.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.9220983225789804,\n          1.0,\n          0.007367735506389647\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"policy_number\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23549121827942596,\n        \"min\": -0.02018362568894633,\n        \"max\": 1.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.05755503298764638,\n          0.05941347834135288,\n          -0.005669096583837333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"policy_deductable\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23198646138029436,\n        \"min\": -0.023544075563802874,\n        \"max\": 1.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.02680740256492644,\n          0.029187621920511574,\n          -0.023544075563802874\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"policy_annual_premium\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23669850903613235,\n        \"min\": -0.04922587585015118,\n        \"max\": 1.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.005017684448634771,\n          0.014403733198297861,\n          0.023546759242612524\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"umbrella_limit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23926883534245502,\n        \"min\": -0.04726824463685171,\n        \"max\": 1.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.01549843971620093,\n          0.018126265491994257,\n          -0.02405564178860637\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"insured_zip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23542004570036046,\n        \"min\": -0.04108348419110516,\n        \"max\": 1.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.01789476100522017,\n          0.025604175773753384,\n          0.04937189842504385\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"capital-gains\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23598908571172794,\n        \"min\": -0.04726824463685171,\n        \"max\": 1.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.006399318706054636,\n          -0.007075077548562903,\n          -0.04690444654009023\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"capital-loss\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.24143448016177677,\n        \"min\": -0.0566150226554259,\n        \"max\": 1.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.020209212437198525,\n          0.007367735506389647,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"incident_hour_of_the_day\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23681776220906195,\n        \"min\": -0.03456318209998997,\n        \"max\": 1.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.07063925305066998,\n          0.08716147803802227,\n          -0.0250537480514206\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"number_of_vehicles_involved\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.24155525393855953,\n        \"min\": -0.045991249650810875,\n        \"max\": 1.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.014735895488254467,\n          0.022102111689942458,\n          -0.014894936765822082\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bodily_injuries\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2349089817527747,\n        \"min\": -0.03456318209998997,\n        \"max\": 1.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          -0.010161564419988944,\n          -0.015679086795352157,\n          -0.024418153824373706\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"witnesses\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23595777749698385,\n        \"min\": -0.04132987270040405,\n        \"max\": 1.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.05838278739006184,\n          0.05235872140228032,\n          -0.04132987270040405\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_claim_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.38025714847330716,\n        \"min\": -0.04034408921760288,\n        \"max\": 1.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.06210799657596277,\n          0.06986262577609959,\n          -0.03606030389185209\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"injury_claim\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.33271895903427195,\n        \"min\": -0.04605990630975065,\n        \"max\": 1.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.06532878550954267,\n          0.07552225887201743,\n          -0.04605990630975065\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"property_claim\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3307123406481463,\n        \"min\": -0.02379030666991932,\n        \"max\": 1.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.03493981037217865,\n          0.06089752629982788,\n          -0.022863440817917042\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"vehicle_claim\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.36791353591986103,\n        \"min\": -0.04276752612754668,\n        \"max\": 1.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.06101287878576936,\n          0.06258764198000882,\n          -0.0326650970430251\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"auto_year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2389600195493168,\n        \"min\": -0.0566150226554259,\n        \"max\": 1.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          -0.00029236541533493186,\n          0.001353608059067652,\n          -0.0566150226554259\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a.find_duplicated()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aRiYpZkPQDN8",
        "outputId": "371b0232-569b-4c7a-8cb3-4a83d69bb61d"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "np.int64(0)"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a.unique_values(\"authorities_contacted\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-oNR6YS6QNpz",
        "outputId": "99af0f03-a41a-4cb3-aab1-37a2a5ecea88"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Police', nan, 'Fire', 'Other', 'Ambulance'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a.fill_missing(\"authorities_contacted\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "ClUtDGJSglj_",
        "outputId": "856c6bc4-0f66-4eec-f726-293d5c57887e"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      Police\n",
              "1      Police\n",
              "2      Police\n",
              "3      Police\n",
              "4      Police\n",
              "        ...  \n",
              "995      Fire\n",
              "996      Fire\n",
              "997    Police\n",
              "998     Other\n",
              "999    Police\n",
              "Name: authorities_contacted, Length: 1000, dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>authorities_contacted</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Police</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Police</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Police</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Police</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Police</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>Fire</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>Fire</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>997</th>\n",
              "      <td>Police</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>998</th>\n",
              "      <td>Other</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>Police</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1000 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "cvvgX_zrQQy5"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "a.unique_values(\"incident_city\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vgs4vU1rQWAE",
        "outputId": "2f7905dd-0ccc-4f85-fc40-63fb1d623058"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Columbus', 'Riverwood', 'Arlington', 'Springfield', 'Hillsdale',\n",
              "       'Northbend', 'Northbrook'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a.detect_outlier('total_claim_amount')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i-KekCLjQh3i",
        "outputId": "9df27fbc-7e5c-4a11-d1b1-71f3160038af"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Lower Bound: -1357.5 and Upper Bound: 113762.5 and Mean: 52761.94\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[114920]"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a.boxplots(\"total_claim_amount\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 407
        },
        "id": "zSmaSDkiU-Ud",
        "outputId": "c7be64a5-effd-4b8e-d6d2-3faa493fea97"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a.count_plots(\"incident_state\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 494
        },
        "id": "0iRo-naBVcdW",
        "outputId": "0a89a983-7726-444b-efc1-0add8e638d8d"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-1-1278361554.py:156: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(x=column_name, data=self.df, palette=\"Set2\")\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a.plot_column_distribution(\"age\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "id": "uaevueg5WBsW",
        "outputId": "f103cd35-9053-4767-d5c7-065d1201abca"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a.scatter_plot(\"age\",\"total_claim_amount\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "vNXHJZ64W82F",
        "outputId": "fe944c02-16ca-489f-d185-28beec6a828b"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 700x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a.column_types()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y_SCi47QX-Rl",
        "outputId": "1f367be2-b58e-47bc-8058-b4447b60e48d"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'categorical': ['policy_bind_date',\n",
              "  'policy_state',\n",
              "  'policy_csl',\n",
              "  'insured_sex',\n",
              "  'insured_education_level',\n",
              "  'insured_occupation',\n",
              "  'insured_hobbies',\n",
              "  'insured_relationship',\n",
              "  'incident_date',\n",
              "  'incident_type',\n",
              "  'collision_type',\n",
              "  'incident_severity',\n",
              "  'authorities_contacted',\n",
              "  'incident_state',\n",
              "  'incident_city',\n",
              "  'incident_location',\n",
              "  'property_damage',\n",
              "  'police_report_available',\n",
              "  'auto_make',\n",
              "  'auto_model',\n",
              "  'fraud_reported'],\n",
              " 'numerical': ['months_as_customer',\n",
              "  'age',\n",
              "  'policy_number',\n",
              "  'policy_deductable',\n",
              "  'policy_annual_premium',\n",
              "  'umbrella_limit',\n",
              "  'insured_zip',\n",
              "  'capital-gains',\n",
              "  'capital-loss',\n",
              "  'incident_hour_of_the_day',\n",
              "  'number_of_vehicles_involved',\n",
              "  'bodily_injuries',\n",
              "  'witnesses',\n",
              "  'total_claim_amount',\n",
              "  'injury_claim',\n",
              "  'property_claim',\n",
              "  'vehicle_claim',\n",
              "  'auto_year']}"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "s97HIAXdYB8F"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "-kplpwucZXtg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "a.stacked_bar(\"policy_state\",\"incident_state\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "bkOMdh8gadNA",
        "outputId": "edff1ab4-6007-44b0-9573-d4cae8e9fc7c"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a.pie_chart(\"fraud_reported\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "VPCZw9wOa_BM",
        "outputId": "fb04cd79-eb8c-4eee-a950-a8bc5cdb04ef"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "tSLz5Wm0bwVG"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "a.count_plots(\"fraud_reported\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 494
        },
        "id": "NdqbwDFIED-v",
        "outputId": "09070594-fe58-4053-8af9-c9ae0dd72c20"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-1-1278361554.py:156: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(x=column_name, data=self.df, palette=\"Set2\")\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "OYRqDHDuFdgH"
      },
      "execution_count": 24,
      "outputs": []
    }
  ]
}
